title
End-To-End Memory Networks
abstract
We introduce a neural network with a recurrent attention model over a possibly large external memory. The architecture is a form of Memory Network [23] but unlike the model in that work, it is trained end-to-end, and hence requires significantly less supervision during training, making it more generally applicable in realistic settings. It can also be seen as an extension of RNNsearch [2] to the case where multiple computational steps (hops) are performed per output symbol. The flexibility of the model allows us to apply it to tasks as diverse as (synthetic) question answering [22] and to language modeling. For the former our approach is competitive with Memory Networks, but with less supervision. For the latter, on the Penn TreeBank and Text8 datasets our approach demonstrates comparable performance to RNNs and LSTMs. In both cases we show that the key concept of multiple computational hops yields improved results.
Two grand challenges in artificial intelligence research have been to build models that can make multiple computational steps in the service of answering a question or completing a task, and models that can describe long term dependencies in sequential data.
Recently there has been a resurgence in models of computation using explicit storage and a notion of attention [23,8,2]; manipulating such a storage offers an approach to both of these challenges. In [23,8,2], the storage is endowed with a continuous representation; reads from and writes to the storage, as well as other processing steps, are modeled by the actions of neural networks.
In this work, we present a novel recurrent neural network (RNN) architecture where the recurrence reads from a possibly large external memory multiple times before outputting a symbol. Our model can be considered a continuous form of the Memory Network implemented in [23]. The model in that work was not easy to train via backpropagation, and required supervision at each layer of the network. The continuity of the model we present here means that it can be trained end-to-end from input-output pairs, and so is applicable to more tasks, i.e. tasks where such supervision is not available, such as in language modeling or realistically supervised question answering tasks. Our model can also be seen as aversion of RNNsearch [2] with multiple computational steps (which we term "hops") per output symbol. We will show experimentally that the multiple hops over the long-term memory are crucial to good performance of our model on these tasks, and that training the memory representation can be integrated in a scalable manner into our end-to-end neural network model.
Our model takes a discrete set of inputs x 1 , ..., x n that are to be stored in the memory, a query q, and outputs an answer a. Each of the xi , q, and a contains symbols coming from a dictionary with V words. The model writes all x to the memory up to a fixed buffer size, and then finds a continuous representation for the x and q. The continuous representation is then processed via multiple hops to output a. This allows backpropagation of the error signal through multiple memory accesses back to the input during training.
1
Single Layer
We start by describing our model in the single layer case, which implements a single memory hop operation. We then show it can be stacked to give multiple hops in memory.
Input memory representation: Suppose we are given an input set x 1 , .., xi to be stored in memory. The entire set of {x i } are converted into memory vectors {m i } of dimension d computed by embedding each xi in a continuous space, in the simplest case, using an embedding matrix A (of size d×V ). The query q is also embedded (again, in the simplest case via another embedding matrix B with the same dimensions as A) to obtain an internal state u. In the embedding space, we compute the match between u and each memory mi by taking the inner product followed by a softmax:
where Softmax(z i ) = e zi / j e zj . Defined in this way p is a probability vector over the inputs.
Output memory representation: Each xi has a corresponding output vector c i (given in the simplest case by another embedding matrix C). The response vector from the memory o is then a sum over the transformed inputs c i , weighted by the probability vector from the input:
Because the function from input to output is smooth, we can easily compute gradients and backpropagate through it. Other recently proposed forms of memory or attention take this approach, notably Bahdanau et al. and Graves et al., see also.
Generating the final prediction: In the single layer case, the sum of the output vector o and the input embedding u is then passed through a final weight matrix W (of size V × d) and a softmax to produce the predicted label:â = Softmax(W (o + u))
The overall model is shown in. During training, all three embedding matrices A, B and C, as well as Ware jointly learned by minimizing a standard cross-entropy loss betweenâ and the true label a. Training is performed using stochastic gradient descent (see Section 4.2 for more details).

Multiple Layers
We now extend our model to handle K hop operations. The memory layers are stacked in the following way:
• The input to layers above the first is the sum of the output o k and the input u k from layer k (different ways to combine o k and u k are proposed later):
• Each layer has its own embedding matrices A k , C k , used to embed the inputs {x i }. However, as discussed below, they are constrained to ease training and reduce the number of parameters. • At the top of the network, the input to W also combines the input and the output of the top memory layer:â = Softmax(W u K+1 ) = Softmax(W (o K + u K )).
We explore two types of weight tying within the model:
1. Adjacent: the output embedding for one layer is the input embedding for the one above, i.e. A k+1 = C k . We also constrain (a) the answer prediction matrix to be the same as the final output embedding, i.e W T = C K , and (b) the question embedding to match the input embedding of the first layer, i.e. B = A 1 . 2. Layer-wise (RNN-like): the input and output embeddings are the same across different layers, i.e. A 1 = A 2 = ... = AK and C 1 = C 2 = ... = C K . We have found it useful to add a linear mapping H to the update of u between hops; that is, u k+1 = Hu k + o k . This mapping is learnt along with the rest of the parameters and used throughout our experiments for layer-wise weight tying.
A three-layer version of our memory model is shown in. Overall, it is similar to the Memory Network model in, except that the hard max operations within each layer have been replaced with a continuous weighting from the softmax.
Note that if we use the layer-wise weight tying scheme, our model can be cast as a traditional RNN where we divide the outputs of the RNN into internal and external outputs. Emitting an internal output corresponds to considering a memory, and emitting an external output corresponds to predicting a label. From the RNN point of view, u in and Eqn. 4 is a hidden state, and the model generates an internal output p (attention weights in) using A. The model then ingests p using C, updates the hidden state, and soon 1 . Here, unlike a standard RNN, we explicitly condition on the outputs stored in memory during the K hops, and we keep these outputs soft, rather than sampling them. Thus our model makes several computational steps before producing an output meant to be seen by the "outside world".

Related Work
A number of recent efforts have explored ways to capture long-term structure within sequences using RNNs or LSTM-based models. The memory in these models is the state of the network, which is latent and inherently unstable overlong timescales. The LSTM-based models address this through local memory cells which lock in the network state from the past. In practice, the performance gains over carefully trained RNNs are modest (see). Our model differs from these in that it uses a global memory, with shared read and write functions. However, with layer-wise weight tying our model can be viewed as a form of RNN which only produces an output after a fixed number of time steps (corresponding to the number of hops), with the intermediary steps involving memory input/output operations that update the internal state.
Some of the very early work on neural networks by Steinbuch and Piske and Taylor considered a memory that performed nearest-neighbor operations on stored input vectors and then fit parametric models to the retrieved sets. This has similarities to a single layer version of our model. Subsequent work in the 1990's explored other types of memory. For example, Das et al. and Mozer et al. introduced an explicit stack with push and pop operations which has been revisited recently by in the context of an RNN model.
Closely related to our model is the Neural Turing Machine of Graves et al., which also uses a continuous memory representation. The NTM memory uses both content and address-based access, unlike ours which only explicitly allows the former, although the temporal features that we will introduce in Section 4.1 allow a kind of address-based access. However, in part because we always write each memory sequentially, our model is somewhat simpler, not requiring operations like sharpening. Furthermore, we apply our memory model to textual reasoning tasks, which qualitatively differ from the more abstract operations of sorting and recall tackled by the NTM.
Our model is also related to Bahdanau et al.. In that work, a bidirectional RNN based encoder and gated RNN based decoder were used for machine translation. The decoder uses an attention model that finds which hidden states from the encoding are most useful for outputting the next translated word; the attention model uses a small neural network that takes as input a concatenation of the current hidden state of the decoder and each of the encoders hidden states. A similar attention model is also used in Xu et al. for generating image captions. Our "memory" is analogous to their attention mechanism, although is only over a single sentence rather than many, as in our case. Furthermore, our model makes several hops on the memory before making an output; we will see below that this is important for good performance. There are also differences in the architecture of the small network used to score the memories compared to our scoring approach; we use a simple linear layer, whereas they use a more sophisticated gated architecture.
We will apply our model to language modeling, an extensively studied task. Goodman showed simple but effective approaches which combine n-grams with a cache. Bengio et al. ignited interest in using neural network based models for the task, with RNNs and LSTMs showing clear performance gains over traditional methods. Indeed, the current state-of-the-art is held by variants of these models, for example very large LSTMs with Dropout or RNNs with diagonal constraints on the weight matrix. With appropriate weight tying, our model can be regarded as a modified form of RNN, where the recurrence is indexed by memory lookups to the word sequence rather than indexed by the sequence itself.

Synthetic Question and Answering Experiments
We perform experiments on the synthetic QA tasks defined in (using version 1.1 of the dataset). A given QA task consists of a set of statements, followed by a question whose answer is typically a single word (in a few tasks, answers area set of words Note that for each question, only some subset of the statements contain information needed for the answer, and the others are essentially irrelevant distractors (e.g. the first sentence in the first example). In the Memory Networks of Weston et al., this supporting subset was explicitly indicated to the model during training and the key difference between that work and this one is that this information is no longer provided. Hence, the model must deduce for itself at training and test time which sentences are relevant and which are not.
Formally, for one of the 20 QA tasks, we are given example problems, each having a set of I sentences {x i } where I ? 320; a question sentence q and answer a. Let the jth word of sentence i be x ij , represented by a one-hot vector of length V (where the vocabulary is of size V = 177, reflecting the simplistic nature of the QA language). The same representation is used for the question q and answer a. Two versions of the data are used, one that has 1000 training problems per task and a second larger one with 10,000 per task.

Model Details
Unless otherwise stated, all experiments used a K = 3 hops model with the adjacent weight sharing scheme. For all tasks that output lists (i.e. the answers are multiple words), we take each possible combination of possible outputs and record them as a separate answer vocabulary word.
Sentence Representation: In our experiments we explore two different representations for the sentences. The first is the bag-of-words (BoW) representation that takes the sentence
.., x in }, embeds each word and sums the resulting vectors: e.g mi = j Ax ij and c i = j Cx ij . The input vector u representing the question is also embedded as a bag of words: u = j Bq j . This has the drawback that it cannot capture the order of the words in the sentence, which is important for some tasks.
We therefore propose a second representation that encodes the position of words within the sentence. This takes the form: mi = j l j · Ax ij , where · is an element-wise multiplication. l j is a column vector with the structure l kj = (1 ? j/J) ? (k/d)(1 ? 2j/J) (assuming 1-based indexing), with J being the number of words in the sentence, and dis the dimension of the embedding. This sentence representation, which we call position encoding (PE), means that the order of the words now affects mi . The same representation is used for questions, memory inputs and memory outputs.
Temporal Encoding: Many of the QA tasks require some notion of temporal context, i.e. in the first example of Section 2, the model needs to understand that Sam is in the bedroom after he is in the kitchen. To enable our model to address them, we modify the memory vector so
is the ith row of a special matrix TA that encodes temporal information. The output embedding is augmented in the same way with a matrix Tc (e.g. c i = j Cx ij + T C (i)). Both TA and T C are learned during training. They are also subject to the same sharing constraints as A and C. Note that sentences are indexed in reverse order, reflecting their relative distance from the question so that x 1 is the last sentence of the story.
Learning time invariance by injecting random noise: we have found it helpful to add "dummy" memories to regularize TA . That is, at training time we can randomly add 10% of empty memories to the stories. We refer to this approach as random noise (RN).

Training Details
The training procedure we use is the same as the QA tasks, except for the following. For each mini-batch update, the 2 norm of the whole gradient of all parameters is measured 5 and if larger than L = 50, then it is scaled down to have norm L. This was crucial for good performance. We use the learning rate annealing schedule from, namely, if the validation cost has not decreased after one epoch, then the learning rate is scaled down by a factor 1.5. Training terminates when the learning rate drops below 10 ?5 , i.e. after 50 epochs or so. Weights are initialized using N (0, 0.05) and batch size is set to 128. On the Penn tree dataset, we repeat each training 10 times with different random initializations and pick the one with smallest validation cost. However, we have done only a single training run on Text8 dataset due to limited time constraints. compares our model to RNN, LSTM and Structurally Constrained Recurrent Nets (SCRN) baselines on the two benchmark datasets. Note that the baseline architectures were tuned in to give optimal perplexity 6 . Our MemN2N approach achieves lower perplexity on both datasets (111 vs 115 for RNN/SCRN on Penn and 147 vs 154 for LSTM on Text8). Note that MemN2N has ?1.5x more parameters than RNNs with the same number of hidden units, while LSTM has ?4x more parameters. We also vary the number of hops and memory size of our MemN2N, showing the contribution of both to performance; note in particular that increasing the number of hops helps. In, we show how MemN2N operates on memory with multiple hops. It shows the average weight of the activation of each memory position over the test set. We can see that some hops concentrate only on recent words, while other hops have more broad attention overall memory locations, which is consistent with the idea that succesful language models consist of a smoothed n-gram model and a cache. Interestingly, it seems that those two types of hops tend to alternate. Also note that unlike a traditional RNN, the cache does not decay exponentially: it has roughly the same average activation across the entire memory. This maybe the source of the observed improvement in language modeling.

Baselines
We compare our approach 2 (abbreviated to MemN2N) to a range of alternate models:
• MemNN: The strongly supervised AM+NG+NL Memory Networks approach, proposed in. This is the best reported approach in that paper. It uses a max operation (rather than softmax) at each layer which is trained directly with supporting facts (strong supervision). It employs n-gram modeling, nonlinear layers and an adaptive number of hops per query.
• MemNN-WSH: A weakly supervised heuristic version of MemNN where the supporting sentence labels are not used in training. Since we are unable to backpropagate through the max operations in each layer, we enforce that the first memory hop should share at least one word with the question, and that the second memory hop should share at least one word with the first hop and at least one word with the answer. All those memories that conform are called valid memories, and the goal during training is to rank them higher than invalid memories using the same ranking criteria as during strongly supervised training.
• LSTM: A standard LSTM model, trained using question / answer pairs only (i.e. also weakly supervised). For more detail, see.

Results

Language Modeling Experiments
The goal in language modeling is to predict the next word in a text sequence given the previous words x. We now explain how our model can easily be applied to this task. 118 111 -----  We now operate on word level, as opposed to the sentence level. Thus the previous N words in the sequence (including the current) are embedded into memory separately. Each memory cell holds only a single word, so there is no need for the BoW or linear mapping representations used in the QA tasks. We employ the temporal embedding approach of Section 4.1.
Since there is no longer any question, q in is fixed to a constant vector 0.1 (without embedding). The output softmax predicts which word in the vocabulary (of size V ) is next in the sequence. A cross-entropy loss is used to train model by backpropagating the error through multiple memory layers, in the same manner as the QA tasks. To aid training, we apply ReLU operations to half of the units in each layer. We use layer-wise (RNN-like) weight sharing, i.e. the query weights of each layer are the same; the output weights of each layer are the same. As noted in Section 2.2, this makes our architecture closely related to an RNN which is traditionally used for language modeling tasks; however here the "sequence" over which the network is recurrent is not in the text, but in the memory hops. Furthermore, the weight tying restricts the number of parameters in the model, helping generalization for the deeper models which we find to be effective for this task. We use two different datasets: Penn Tree Bank: This consists of 929k/73k/82k train/validation/test words, distributed over a vocabulary of 10k words. The same preprocessing as was used.
Text8: This is a a pre-processed version of the first 100M million characters, dumped from Wikipedia. This is split into 93.3M/5.7M/1M character train/validation/test sets. All word occurring less than 5 times are replaced with the <UNK> token, resulting in a vocabulary size of ?44k.

Conclusions and Future Work
In this work we showed that a neural network with an explicit memory and a recurrent attention mechanism for reading the memory can be successfully trained via backpropagation on diverse tasks from question answering to language modeling. Compared to the Memory Network implementation of there is no supervision of supporting facts and so our model can be used in a wider range of settings. Our model approaches the same performance of that model, and is significantly better than other baselines with the same level of supervision. On language modeling tasks, it slightly outperforms tuned RNNs and LSTMs of comparable complexity. On both tasks we can see that increasing the number of memory hops improves performance.
However, there is still much to do. Our model is still unable to exactly match the performance of the memory networks trained with strong supervision, and both fail on several of the 1k QA tasks. Furthermore, smooth lookups may not scale well to the case where a larger memory is required. For these settings, we plan to explore multiscale notions of attention or hashing, as proposed in.: Examples of attention weights during different memory hops for the bAbi tasks. The model is PE+LS+RN with 3 memory hops that is trained separately on each task with 10k training data. The support column shows which sentences are necessary for answering questions. Although this information is not used, the model succesfully learns to focus on the correct support sentences on most of the tasks. The hop columns show where the model put more weight (indicated by values and blue color) during its three hops. The mistakes made by the model are highlighted by red color.

Appendix A Results on 10k QA dataset