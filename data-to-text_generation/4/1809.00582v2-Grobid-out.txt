title
Data-to-Text Generation with Content Selection and Planning
abstract
Recent advances in data-to-text generation have led to the use of large-scale datasets and neural network models which are trained end-to-end, without explicitly modeling what to say and in what order. In this work, we present a neural network architecture which incorporates content selection and planning without sacrificing end-to-end training. We decompose the generation task into two stages. Given a corpus of data records (paired with descriptive documents), we first generate a content plan highlighting which information should be mentioned and in which order and then generate the document while taking the content plan into account. Automatic and human-based evaluation experiments show that our model 1 outperforms strong baselines improving the state-of-the-art on the recently released ROTOWIRE dataset.
Introduction
Data-to-text generation broadly refers to the task of automatically producing text from non-linguistic input. The input maybe in various forms including data bases of records, spreadsheets, expert system knowledge bases, simulations of physical systems, and soon. shows an example in the form of a data base containing statistics on NBA basketball games, and a corresponding game summary.
Traditional methods for data-to-text generation) implement a pipeline of modules including content planning (selecting specific content from some input and determining the structure of the output text), sentence planning (determining the structure and lexical content of each sentence) and surface realization (converting the sentence plan to a surface string). Recent neural generation systems) do not explicitly model any of these stages, rather they are trained in an end-to-end fashion using the very successful encoder-decoder architecture as their backbone.
Despite producing over all fluent text, neural systems have difficulty capturing long-term structure and generating documents more than a few sentences long. show that neural text generation techniques perform poorly at content selection, they struggle to maintain inter-sentential coherence, and more generally a reasonable ordering of the selected facts in the output text. Additional challenges include avoiding redundancy and being faithful to the input. Interestingly, comparisons against templatebased methods show that neural techniques do not farewell on metrics of content selection recall and factual output generation (i.e., they often hallucinate statements which are not supported by the facts in the data base).
In this paper, we address these shortcomings by explicitly modeling content selection and planning within a neural data-to-text architecture. Our model learns a content plan from the input and conditions on the content plan in order to generate the output document (see for an illustration). An explicit content planning mechanism has at least three advantages for multi-sentence document generation: it represents a high-level organization of the document structure allowing the decoder to concentrate on the easier tasks of sentence planning and surface realization; it makes the process of data-to-document generation more interpretable by generating an intermediate representation; and reduces redundancy in the output, since it is less likely for the content plan to contain the same information in multiple places. We train our model end-to-end using neural networks and evaluate its performance on ROTOWIRE, a recently released dataset which contains statistics of NBA basketball games paired with human-written summaries (see). Automatic and human evaluation shows that modeling content selection and planning improves generation considerably over competitive baselines.
The Boston Celtics defeated the host Indiana Pacers 105-99 at Bankers Life Fieldhouse on Saturday. In a battle between two injury-riddled teams, the Celtics were able to prevail with a much needed road victory. The key was shooting and defense, as the Celtics outshot the Pacers from the field, from three-point range and from the free-throw line. Boston also held Indiana to 42 percent from the field and 22 percent from long distance. The Celtics also won the rebounding and assisting differentials, while tying the Pacers in turnovers. There were 10 ties and 10 lead changes, as this game went down to the final seconds. Boston (5-4) has had to deal with a gluttony of injuries, but they had the fortunate task of playing a team just as injured here. Isaiah Thomas led the team in scoring, totaling 23 points and five assists on 4-of-13 shooting. He got most of those points by going 14-of-15 from the free-throw line. Kelly Olynyk got a rare start and finished second on the team with his 16 points, six rebounds and four assists.

Related Work
The generation literature provides multiple examples of content selection components developed for various domains which are either hand-built or learned from data. Likewise, creating summaries of sports games has been a topic of interest since the early beginnings of generation systems.
Earlier work on content planning has relied on generic planners, based on Rhetorical Structure Theory. They defined content planners by analysing the target texts and devising hand-crafted rules. studied ordering constraints for content plans and learn a content planner from an aligned corpus of inputs and human outputs. A few researchers) rank content plans according to a ranking function.
More recent work focuses on end-to-end systems instead of individual components. However, most models make simplistic assumptions such as generation without any content selection or planning or content selection without planning. An exception are who incorporate content plans represented as grammar rules operating on the document level. Their approach works reasonably well with weather forecasts, but does not scale easily to larger data bases, with richer vocabularies, and longer text descriptions. The model relies on the EM algorithm to learn the weights of the grammar rules which can be very many even when tokens are aligned to data base records as a preprocessing step.
Our work is closest to recent neural network models which learn generators from data and accompanying text resources. Most previous approaches generate from Wikipedia infoboxes focusing either on single sentences or short texts (Perez-Beltrachini and Lapata 2018). use a neural encoder-decoder model to generate weather forecasts and soccer commentaries, while generate NBA game summaries (see). They introduce a new dataset for data-to-document generation which is sufficiently large for neural network training and adequately challenging for testing the capabilities of document-scale text generation (e.g., the average summary length is 330 words and the average number of input records is 628). Moreover, they propose various automatic evaluation measures for assessing the quality of system output. Our model follows on from addressing the challenges for data-to-text generation identified in their work. We are not aware of any previous neural network-based approaches which incorporate content selection and planning mechanisms and generate multi-sentence documents. Perez-Beltrachini and Lapata (2018) introduce a content selection component (based on multi-instance learning) without content planning, while propose a sentence planning mechanism which orders the contents of a Wikipedia infobox in order to generate a single sentence.

Problem Formulation
The input to our model is a table of records (see left hand-side). Each record r j has four features including its type (r j,1 ; e.g., LOSS, CITY), entity (r j,2 ; e.g., Pacers, Miles Turner), value (r j,3 ; e.g., 11, Indiana), and whether a player is on the home-or away-team (r j,4 ; see column H/V in), represented as {r j,k } 4 k=1 . The output y is a document containing words y = y 1 ? ? ? y |y| where |y| is the document length. shows the over all architecture of our model which consists of two stages: (a) content selection and planning operates on the input records of a data base and produces a content plan specifying which records are to be verbalized in the document and in which order (see) and (b) text generation produces the output text given the content plan as input; at each decoding step, the generation model attends over vector representations of the records in the content plan.
Let r = {r j } |r| j=1 denote a table of input records and y the output text. We model p(y|r) as the joint probability of text y and content plan z, given input r. We further decompose p(y, z|r) into p(z|r), a content selection and planning  In the following we explain how the components p(z|r) and p(y|r, z) are estimated.

Record Encoder
The input to our model is a table of unordered records, each represented as features {r j,k } 4 k=1 . Following previous work, we embed features into vectors, and then use a multilayer perceptron to obtain a vector representation r j for each record: r j = ReLU(W r [r j,1 ; r j,2 ; r j,3 ; r j,4 ] + b r ) where [; ] indicates vector concatenation, W r ? R n?4n , b r ? Rn are parameters, and ReLU is the rectifier activation function.

Content Selection Gate
The context of a record can be useful in determining its importance vis-a-vis other records in the table. For example, if a player scores many points, it is likely that other meaningfully related records such as field goals, three-pointers, or rebounds will be mentioned in the output summary. To better capture such dependencies among records, we make use of the content selection gate mechanism as shown in.
We first compute the attention scores ? j,k over the input table and use them to obtain an attentional vector r att j for each record r j :
where W a ? R n?n , W g ? R n?2n are parameter matrices, and k =j ? j,k = 1.  We next apply the content selection gating mechanism tor j , and obtain the new record representation r cs j via: g j = sigmoid r att jr cs j = g jr j where denotes element-wise multiplication, and gate g j ? [0, 1] n controls the amount of information flowing from r j . In other words, each element in r j is weighed by the corresponding element of the content selection gate g j .

Content Planning
In our generation task, the output text is long but follows a canonical structure. Game summaries typically begin by discussing which team won/lost, following with various statistics involving individual players and their teams (e.g., who performed exceptionally well or under-performed), and finishing with any upcoming games. We hypothesize that generation would benefit from an explicit plan specifying both what to say and in which order. Our model learns such content plans from training data. However, notice that RO-TOWIRE (see) and most similar data-to-text datasets do not naturally contain content plans. Fortunately, we can obtain these relatively straightforwardly following an information extraction approach (which we explain in Section 4).
Suffice it to say that plans are extracted by mapping the text in the summaries onto entities in the input table, their values, and types (i.e., relations). A plan is a sequence of pointers with each entry pointing to an input record {r j } |r| j=1 . An excerpt of a plan is shown in. The order in the plan corresponds to the sequence in which entities appear in the game summary. Let z = z 1 . . . z |z| denote the content planning sequence. Each z k points to an input record, i.e., z k ? {r j } |r| j=1 . Given the input records, the probability p(z|r) is decomposed as:
Since the output tokens of the content planning stage correspond to positions in the input sequence, we make use of Pointer Networks. The latter use attention to point to the tokens of the input sequence rather than creating a weighted representation of source encodings. As shown in, given {r j } |r| j=1 , we use an LSTM decoder to generate tokens corresponding to positions in the Celtics  input. The first hidden state of the decoder is initialized by avg({r cs j } |r| j=1 ), i.e., the average of record vectors. At decoding step k, let h k be the hidden state of the LSTM. We model p(z k = r j |z <k , r) as the attention over input records:
where the probability is normalized to 1, and W care parameters. Once z k points to record r j , we use the corresponding vector r cs j as the input of the next LSTM unit in the decoder.

Text Generation
The probability of output text y conditioned on content plan z and input table r is modeled as:
where y <t = y 1 . . . y t?1 . We use the encoder-decoder architecture with an attention mechanism to compute p(y|r, z).
We first encode the content plan z into {e k } |z| k=1 using a bidirectional LSTM. Because the content plan is a sequence of input records, we directly feed the corresponding record vectors {r cs j } |r| j=1 as input to the LSTM units, which share the record encoder with the first stage.
The text decoder is also based on a recurrent neural network with LSTM units. The decoder is initialized with the hidden states of the final step in the encoder. At decoding step t, the input of the LSTM unit is the embedding of the previously predicted wordy t?1 . Let d t be the hidden state of the t-th LSTM unit. The probability of predicting y t from the output vocabulary is computed via:
(1)
are parameters, and |V y | is the output vocabulary size. We further augment the decoder with a copy mechanism, i.e., the ability to copy words directly from the value portions of records in the content plan (i.e., {z k } |z| k=1 ). We experimented with joint) and conditional copy methods). Specifically, we introduce a variable u t ? {0, 1} for each time step to indicate whether the predicted token y t is copied (u t = 1) or not (u t = 0). The probability of generating y t is computed by:
where u t is marginalized out.
Joint Copy The probability of copying from record values and generating from the vocabulary is globally normalized:
where y t ? z k indicates that y t can be copied from z k , W b is shared as in Equation, and W y , by are shared as in Equation.

Conditional Copy
The variable u t is first computed as a switch gate, and then is used to obtain the output probability:
where ? t,k and p gen (y t |y <t , z, r) are computed as in Equations (1)-(2), and w u ? Rn , bu ? R are parameters. Following and, if y t appears in the content plan during training, we assume that y t is copied (i.e., u t = 1). 2

Training and Inference
Our model is trained to maximize the log-likelihood of the gold 3 content plan given table records rand the gold output text given the content plan and where z and y represent content plan and output text candidates, respectively. For each stage, we utilize beam search to approximately obtain the best results.

Experimental Setup
Data We trained and evaluated our model on, a dataset of basketball game summaries, paired with corresponding box-and line-score tables. The summaries are professionally written, relatively well structured and long (337 words on average). The number of record types is 39, the average number of records is 628, the vocabulary size is 11.3K words and token count is 1.6M. The dataset is ideally suited for document-scale generation. We followed the data partitions introduced in Wiseman et al.: we trained on 3,398 summaries, tested on 728, and used 727 for validation.

Content Plan Extraction
We extracted content plans from the ROTOWIRE game summaries following an information extraction (IE) approach. Specifically, we used the IE system introduced in Wiseman et al. which identifies candidate entity (i.e., player, team, and city) and value (i.e., number or string) pairs that appear in the text, and then predicts the type (aka relation) of each candidate pair. For instance, in the document in Table 1, the IE system might identify the pair "Jeff Teague, 20" and then predict that that their relation is "PTS", extracting the record (Jeff Teague, 20, PTS). train an IE system on RO-TOWIRE by determining word spans which could represent entities (i.e., by matching them against players, teams or cities in the data base) and numbers. They then consider each entity-number pair in the same sentence, and if there is a record in the data base with matching entities and values, the pair is assigned the corresponding record type or otherwise given the label "none" to indicate unrelated pairs. We adopted their IE system architecture which predicts relations by ensembling 3 convolutional models and 3 bidirectional LSTM models. We trained this system on the train-3 Strictly speaking, the content plan is not gold since it was not created by an expert but is the output of a fairly accurate IE system. ing portion of the ROTOWIRE corpus. 4 On held-out data it achieved 94% accuracy, and recalled approximately 80% of the relations licensed by the records. Given the output of the IE system, a content plan simply consists of (entity, value, record type, h/v) tuples in their order of appearance in a game summary (the content plan for the summary in is shown in). Player names are pre-processed to indicate the individual's first name and surname (see Isaiah and Thomas in; team records are also pre-processed to indicate the name of team's city and the team itself (see Boston and Celtics in).
Training Configuration We validated model hyperparameters on the development set. We did not tune the dimensions of word embeddings and LSTM hidden layers; we used the same value of 600 reported in. We used one-layer pointer networks during content planning, and two-layer LSTMs during text generation. Input feeding was employed for the text decoder. We applied dropout) at a rate of 0.3. Models were trained for 25 epochs with the Adagrad optimizer; the initial learning rate was 0.15, learning rate decay was selected from {0.5, 0.97}, and batch size was 5. For text decoding, we made use of BPTT) and set the truncation size to 100. We set the beam size to 5 during inference. All models are implemented in OpenNMT-py.

Results
Automatic Evaluation We evaluated model output using the metrics defined in. The idea is to employ a fairly accurate IE system (see the description in Section 4) on the gold and automatic summaries and compare whether the identified relations align or diverge.
Let? be the gold output, and y the system output. Content selection (CS) measures how well (in terms of precision and recall) the records extracted from y match those found in?. Relation generation (RG) measures the factuality of the generation system as the proportion of records extracted from y which are also found in r (in terms of precision and number of unique relations). Content ordering (CO) measures how well the system orders the records it has chosen and is computed as the normalized Damerau-Levenshtein Distance between the sequence of records extracted from y and?. In addition to these metrics, we report BLEU, with human-written game summaries as reference.
Our results on the development set are summarized in. We compare our Neural Content Planning model (NCP for short) against the two encoder-decoder (ED) models presented in with joint copy (JC) and conditional copy (CC), respectively. In addition to our own re-implementation of these models, we include the best scores reported in which were obtained with an encoder-decoder model enhanced with con- also shows results when NCP uses oracle content plans (OR) as input. In addition, we report the performance of a template-based generator which creates a document consisting of eight template sentences: an introductory sentence (who won/lost), six player-specific sentences (based on the six highest-scoring players in the game), and a conclusion sentence. As can be seen, NCP improves upon vanilla encoderdecoder models (ED+JC, ED+CC), irrespective of the copy mechanism being employed. In fact, NCP achieves comparable scores with either joint or conditional copy mechanism which indicates that it is the content planner which brings performance improvements. Overall, NCP+CC achieves best content selection and content ordering scores in terms of BLEU. Compared to the best reported system in Wiseman et al., we achieve an absolute improvement of approximately 12% in terms of relation generation; content selection precision also improves by 5% and recall by 15%, content ordering increases by 3%, and BLEU by 1.5 points. The results of the oracle system (NCP+OR) show that content selection and ordering do indeed correlate with the quality of the content plan and that any improvements in our planning component would result in better output. As far as the template-based system is concerned, we observe that it obtains low BLEU and CS precision but scores high on CS recall and RG metrics. This is not surprising as the template system is provided with domain knowledge which our model does not have, and thus represents an upper-bound on content selection and relation generation. We also measured  the degree to which the game summaries generated by our model contain redundant information as the proportion of non-duplicate records extracted from the summary by the IE system. 84.5% of the records in NCP+CC are non-duplicates compared to who obtain 72.9% showing that our model is less repetitive. We further conducted an ablation study with the conditional copy variant of our model (NCP+CC) to establish whether improvements are due to better content selection (CS) and/or content planning (CP). We see in that content selection and planning individually contribute to performance improvements over the baseline (ED+CC), and accuracy further increases when both components are taken into account. In addition we evaluated these components on their own (independently of text generation) by comparing the output of the planner (see p(z|r) block in against gold content plans obtained using the IE system (see row NCP in. Compared to the full system (NCP+CC), content selection precision and recall are higher (by 4.5% and 2%, respectively) as well as content ordering (by 1.8%). In another study, we used the CS and CO metrics to measure how well the generated text follows the content plan produced by the planner (instead of arbitrarily adding or removing information). We found out that NCP+CC generates game summaries which follow the content plan closely: CS precision is higher than 85%, CS recall is higher than 93%, and CO higher than 84%. This reinforces our claim that higher accuracies in the content selection and planning phases will result in further improvements in text generation.
The test set results in follow a pattern similar to the development set. NCP achieves higher accuracy in all metrics including relation generation, content selection, content ordering, and BLEU compared to. We provide examples of system output in and the supplementary material.
Human-Based Evaluation We conducted two human evaluation experiments using the Amazon Mechanical Turk (AMT) crowdsourcing platform. The first study assessed relation generation by examining whether improvements in relation generation at tested by automatic evaluation metrics are indeed corroborated by human judgments. We compared our best performing model (NCP+CC), with gold reference summaries, a template system and the best model of Wiseman et al.. AMT workers were presented with a spe-The Golden State Warriors defeated the Boston Celtics 104-88 at TD Garden on Friday. The Warriors (10-2) came into this game winners of five of their last six games, but the Warriors (6-6) were able to pull away in the second half. Klay Thompson led the way for the Warriors with 28 points on 12-of-21 shooting, while Kevin Durant added 23 points, 10 rebounds, seven assists and two steals. Stephen Curry added 16 points and eight assists, while Draymond Green rounded out the box score with 11 points, eight rebounds and eight assists. For the Celtics, it was Isaiah Thomas who shot just 4-of-12 from the field and finished with 18 points. Avery Bradley added 17 points and 10 rebounds, while the rest of the Celtics combined to score just seven points. Boston will look to get back on track as they play host to the 76ers on Friday.. Text that accurately reflects a record in the associated box or line score is in blue, erroneous text is in red.
cific NBA game's box score and line score, and four (randomly selected) sentences from the summary. They were asked to identify supporting and contradicting facts mentioned in each sentence. We randomly selected 30 games from the test set. Each sentence was rated by three workers.
The left two columns in contain the average number of supporting and contradicting facts per sentence as determined by the crowdworkers, for each model. The template-based system has the highest number of supporting facts, even compared to the human gold standard. TEMPL does not perform any content selection, it includes a large number of facts from the data base and since it does not perform any generation either, it exhibits a few contradictions. Compared to WS-2017 and the Gold summaries, NCP+CC displays a larger number of supporting facts. All models are significantly 5 different in the number of supporting facts (#Supp) from TEMPL (using a one-way ANOVA with posthoc Tukey HSD tests). NCP+CC is significantly different from WS-2017 and Gold. With respect to contradicting facts (#Cont), Gold and TEMPL are not significantly different from each other but are significantly different from the neural systems.
In the second experiment, we assessed the generation quality of our model. We elicited judgments for the same 30 games used in the first study. For each game, participants were asked to compare a human-written summary, NCP with conditional copy (NCP+CC), best model, and the template system. Our study used Best-Worst Scaling (BWS; Louviere, Flynn, and Marley 2015), a technique shown to be less labor-intensive and providing more reliable results as compared to rating scales. We arranged every 4-tuple of com-5 All significance differences reported throughout this paper are with a level less than 0.05.: Average number of supporting (#Support) and contradicting (#Contra) facts in game summaries and bestworst scaling evaluation (higher is better) for grammaticality (Gram), Coherence (Cohere), and Conciseness (Concise).
peting summaries into 6 pairs. Every pair was shown to three crowdworkers, who were asked to choose which summary was best and which was worst according to three criteria: Grammaticality (is the summary fluent and grammatical?), Coherence (is the summary easy to read? does it follow a natural ordering of facts?), and Conciseness (does the summary avoid redundant information and repetitions?). The score of a system for each criterion is computed as the difference between the percentage of times the system was selected as the best and the percentage of times it was selected as the worst). The scores range from ?100 (absolutely worst) to +100 (absolutely best).
The results of the second study are summarized in. Gold summaries were perceived as significantly better compared to the automatic systems across all criteria (again using a one-way ANOVA with post-hoc Tukey HSD tests). NCP+CC was perceived as significantly more grammatical than WS-2017 but not compared to TEMPL which does not suffer from fluency errors since it does not perform any generation. NCP+CC was perceived as significantly more coherent than TEMPL and WS-2017. The template fairs poorly on coherence, its output is stilted and exhibits no variability (see top block in). With regard to conciseness, the neural systems are significantly worse than TEMPL, while NCP+CC is significantly better than WS-2017. By design the template cannot repeat information since there is no redundancy in the sentences chosen to verbalize the summary.
Taken together, our results show that content planning improves data-to-text generation across metrics and systems. We find that NCP+CC over all performs best, however there is a significant gap between automatically generated summaries and human-authored ones.

Conclusions
We presented a data-to-text generation model which is enhanced with content selection and planning modules. Experimental results (based on automatic metrics and judgment elicitation studies) demonstrate that generation quality improves both in terms of the number of relevant facts contained in the output text, and the order according to which these are presented. Positive side-effects of content planning are additional improvements in the grammaticality, and conciseness of the generated text. In the future, we would like to learn more detail-oriented plans involving inference over multiple facts and entities. We would also like to verify our approach across domains and languages.
Comparison with the Results in Webpage
There was a bug in the dataset creation of which they identified and corrected. They also posted updated scores on their webpage. We have used this corrected dataset in our experiments. We then discovered a bug in their code which computes the automatic metrics. The scores reported in this paper are using the corrected automatic metrics. To make the scores on our paper comparable to the numbers published on the webpage of, we recompute here our scores with older IE metrics (without the bug fix) in and (test set). shows two sample documents generated using the template system, and our neural content planning model with conditional copy (NCP+CC). The text is highlighted in blue if it agrees with respective box/line scores and red if the text contradicts box/line scores. We also use the orange color to highlight repetitions.

Qualitative Examples
The template documents are gold standard in relation generation accuracy and they appear all in blue. The documents of show instances of contradictions and tend to be verbose containing duplicate text too. In contrast, our neural content planning model generates more factual text with fewer contradictions to box/line scores and less duplicate information.   3PT, 6-6 FT) to go with 3 rebounds. Nikola Jokic scored 17 points (6-10 FG, 0-0 3PT, 5-7 FT) to go with 11 rebounds. Markieff Morris scored 15 points (5-12 FG, 0-0 3PT, 5-5 FT) to go with 3 rebounds. John Wall scored 15 points (5-14 FG, 0-4 3PT, 5-6 FT) to go with 7 rebounds. Danilo Gallinari scored 14 points (3-11 FG, 1-8 3PT, 7-9 FT) to go with 4 rebounds. Jusuf Nurkic scored 13 points (6-6 FG, 0-0 3PT, 1-2 FT) to go with 7 rebounds. The Washington Wizards' next game will beat home against the Dallas Mavericks, while the Denver Nuggets will travel to play the Bulls.

WS-2017
The Golden State Warriors defeated the Boston Celtics, 104-88, at TD Garden on Wednesday. The Warriors (10-2) checked in to Saturday's contest with only two road wins in their last 11 games, but they were able to come away with a win against the Celtics (6-6) on Friday. The Warriors (10-2) were able to pull away in the second half, outscoring the Celtics (6-6) by a 31-9 margin over the final 12 minutes. However, Golden State was able to pull away in the second half, outscoring the Celtics by a 31-9 margin over the final 12 minutes. The Warriors were led by Kevin Durant's 23 points, which he supplemented with seven rebounds, seven assists, two steals and a block. Stephen Curry was next with 16 points, eight assists, three rebounds and four steals. Klay Thompson was next with a 28-point, 10-rebound double-double that also included three assists, two steals and a block. Draymond Green was next with 11 points, eight rebounds, eight assists and two blocks. Draymond Green was next with 11 points, eight rebounds, eight assists and two blocks. Draymond Green supplied 11 points, eight rebounds, eight assists, two blocks and a steal. David West paced the reserves with 4 points, two rebounds, a block and a block. The Celtics were paced by Thomas' 18 points, which he supplemented with four assists, two rebounds and four steals. Avery Bradley posted a 17-point, 10-rebound double-double that also included two assists, two steals and a block. Avery Bradley posted a 17-point, 10-rebound double-double that also included two assists, two steals and a block. Kelly Olynyk led the second unit with 11 points, three rebounds, two assists and a pair of steals. The Warriors head back home to face off with the Detroit Pistons on Friday night, while the Celtics remain home and await the Toronto Raptors for a Wednesday night showdown. NCP+CC
The Golden State Warriors defeated the Boston Celtics 104-88 at TD Garden on Friday. The Warriors (10-2) came into this game winners of five of their last six games, but the Warriors (6-6) were able to pull away in the second half. Klay Thompson led the way for the Warriors with 28 points on 12-of-21 shooting, while Kevin Durant added 23 points, 10 rebounds, seven assists and two steals. Stephen Curry added 16 points and eight assists, while Draymond Green rounded out the box score with 11 points, eight rebounds and eight assists. For the Celtics, it was Isaiah Thomas who shot just 4-of-12 from the field and finished with 18 points. Avery Bradley added 17 points and 10 rebounds, while the rest of the Celtics combined to score just seven points. Boston will look to get back on track as they play host to the 76ers on Friday.: Example documents from the template-based system, WS-2017, the best system of Wiseman et al., and our Neural Content Planning model with conditional copy (NCP+CC). Text that accurately reflects a record in the associated box or line score is recorded in blue, erroneous text is marked in red, duplicate text is marked in orange.