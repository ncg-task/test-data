title
Pragmatically Informative Text Generation
abstract
We improve the informativeness of models for conditional text generation using techniques from computational pragmatics. These techniques formulate language production as a game between speakers and listeners, in which a speaker should generate output text that a listener can use to correctly identify the original input that the text describes. While such approaches are widely used in cognitive science and grounded language learning, they have received less attention for more standard language generation tasks. We consider two pragmatic modeling methods for text generation: one where pragmatics is imposed by information preservation, and another where pragmatics is imposed by explicit modeling of distractors. We find that these methods improve the performance of strong existing systems for abstractive summarization and generation from structured meaning representations.
Introduction
Computational approaches to pragmatics cast language generation and interpretation as gametheoretic or Bayesian inference procedures. While such approaches are capable of modeling a variety of pragmatic phenomena, their main application in natural language processing has been to improve the informativeness of generated text in grounded language learning problems. In this paper, we show that pragmatic reasoning can be similarly used to improve performance in more traditional language generation tasks like generation from structured meaning representations) and summarization.
Our work builds on a line of learned Rational Speech Acts (RSA) models, in which generated strings are selected to optimize the behav- Human-written A cheap coffee shop in riverside with a 5 out of 5 customer rating is Fitzbillies. Fitzbillies is family friendly and serves English food.
Base sequence-to-sequence model (S0) Fitzbillies is a family friendly coffee shop located near the river.
Distractor-based pragmatic system (S D 1 ) Fitzbillies is a family friendly coffee shop that serves English food. It is located in riverside area. It has a customer rating of 5 out of 5 and is cheap.
Reconstructor-based pragmatic system (S R 1 ) Fitzbillies is a family friendly coffee shop that serves cheap English food in the riverside area. It has a customer rating of 5 out of 5.: Example outputs of our systems on the E2E generation task. While a base sequence-to-sequence model (S 0 , Sec. 2) fails to describe all attributes in the input meaning representation, both of our pragmatic systems (S R 1 , Sec. 3.1 and SD 1 , Sec. 3.2) and the human-written reference do.
ior of an embedded listener model. The canonical presentation of the RSA framework (Frank and Goodman, 2012) is grounded in reference resolution: models of speakers attempt to describe referents in the presence of distractors, and models of listeners attempt to resolve descriptors to referents. Recent work has extended these models to more complex groundings, including images and trajectories. The techniques used in these settings are similar, and the primary intuition of the RSA framework is preserved: from the speaker's perspective, a good description is one that picks out, as discriminatively as possible, the content the speaker intends for the listener to identify.
Outside of grounding, cognitive modeling, and targeted analysis of linguistic phenomena, rational speech acts models have seen limited application in the natural language processing literature. In this work we show that they can be extended to a distinct class of language generation problems that use as referents structured descriptions of lingustic content, or other natural language texts. In accordance with the maxim of quantity or the Q-principle, pragmatic approaches naturally correct underinformativeness problems observed in state-of-theart language generation systems (S 0 in).
We present experiments on two language generation tasks: generation from meaning representations and summarization. For each task, we evaluate two models of pragmatics: the reconstructor-based model of and the distractor-based model of. Both models improve performance on both tasks, increasing ROUGE scores by 0.2-0.5 points on the CNN/Daily Mail abstractive summarization dataset and BLEU scores by 2 points on the End-to-End (E2E) generation dataset, obtaining new state-of-the-art results.

Tasks
We formulate a conditional generation task as taking an input i from a space of possible inputs I (e.g., input sentences for abstractive summarization; meaning representations for structured generation) and producing an output o as a sequence of tokens (o 1 , . . . , o T ). We build our pragmatic approaches on top of learned base speaker models S 0 , which produce a probability distribution S 0 (o | i) over output text for a given input. We focus on two conditional generation tasks where the information in the input context should largely be preserved in the output text, and apply the pragmatic procedures outlined in Sec. 3 to each task. For these S 0 models we use systems from past work thatare strong, but may still be underinformative relative to human reference outputs (e.g.,).

Meaning Representations
We evaluate on the E2E task of generation from meaning representations containing restaurant attributes). We report the task's five automatic metrics: BLEU, NIST, METEOR, ROUGE-L and CIDEr. compares the performance of our base S 0 and pragmatic models to the baseline T-Gen system and the best previous result from the 20 primary systems evaluated in the E2E challenge. The systems obtaining these results encompass a range of approaches: a template system), a neural model, models trained with reinforcement learning, and systems using ensembling and reranking. To ensure that the benefit of the reconstructor-based pragmatic approach, which uses two models, is not due solely to a model combination effect, we also compare to an ensemble of two base models (S 0 ?2). This ensemble uses a weighted combination of scores of two independently-trained S 0 models, following Eq. 1 (with weights tuned on the development data).
Both of our pragmatic systems improve over the strong baseline S 0 system on all five metrics, with the largest improvements (2.1 BLEU, 0.2 NIST, 0.8 METEOR, 1.5 ROUGE-L, and 0.1 CIDEr) from the S R 1 model. This S R 1 model outperforms the previous best results obtained by any system in the E2E challenge on BLEU, NIST, and CIDEr, with comparable performance on METEOR and ROUGE-L.: Test results for the non-anonymized CNN/Daily Mail summarization task. We compare to extractive baselines, and the best previous abstractive results of, and. We bold our highest performing model on each metric, as well as previous work if it outperforms all of our models.

Pragmatic Models
To produce informative outputs, we consider pragmatic methods that extend the base speaker models, S 0 , using listener models, L, which produce a distribution L(i | o) over possible inputs given an output. Listener models are used to derive pragmatic speakers, S 1 (o | i), which produce output that has a high probability of making a listener model L identify the correct input. There area large space of possible choices for designing Land deriving S 1 ; we follow two lines of past work which we categorize as reconstructor-based and distractor-based. We tailor each of these pragmatic methods to both our two tasks by developing reconstructor models and methods of choosing distractors.

Reconstructor-Based Pragmatics
Pragmatic approaches in this category rely on a reconstructor listener model L R defined independently of the speaker. This listener model produces a distribution L R (i | o) over all possible input contexts i ? I, given an output description o. We use sequence-to-sequence or structured classification models for L R (described below), and train these models on the same data used to supervise the S 0 models.
The listener model and the base speaker model together define a pragmatic speaker, with output score given by:
where ? is a rationality parameter that controls how much the model optimizes for discriminative outputs (see and for a discussion). We select an output text sequence o for a given input i by choosing the highest scoring output under Eq. 1 from a set of candidates obtained by beam search in S 0 (? | i).

Distractor-Based Pragmatics
Pragmatic approaches in this category derive pragmatic behavior by producing outputs that distinguish the input i from an alternate distractor input (or inputs). We construct a distractor ? for a given input i in a task-dependent way. We follow the approach of Cohn-Gordon et al., outlined briefly here. The base speakers we build on produce outputs incrementally, where the probability of o t , the word output at time t, is conditioned on the input and the previously generated words: S 0 (o t | i, o <t ). Since the output is generated incrementally and there is no separate listener model that needs to condition on entire output decisions, the distractor-based approach is able to make pragmatic decisions at each word rather than choosing between entire output candidates (as in the reconstructor approaches).
The listener L D and pragmatic speaker SD 1 are derived from the base speaker S 0 and a belief distribution pt (?) maintained at each timestep t over the possible inputs ID :
where ? is again a rationality parameter, and the initial belief distribution p 0 (?) is uniform, i.e., p 0 (i) = p 0 ( ? ) = 0.5. Eqs. 2 and 4 are normalized over the true input i and distractor ?; Eq. 3 is normalized over the output vocabulary. We construct an output text sequence for the pragmatic speaker SD 1 incrementally using beam search to approximately maximize Eq. 3.
Meaning Representations A distractor MR is automatically constructed for each input to be the most distinctive possible against the input. We construct this distractor by masking each present input attribute and replacing the value of each nonpresent attribute with the value that is most frequent for that attribute in the training data. For example, for the input MR in, the distractor is NEAR[BURGER KING].
Summarization For each extracted input sentence i (p) , we use the previous extracted sentence i (p?1) from the same document as the distractor input ? (for the first sentence we do not use a distractor). This is intended to encourage outputs o (p) to contain distinctive information against other summaries produced within the same document.

Experiments
For each of our two conditional generation tasks we evaluate on a standard benchmark dataset, following past work by using automatic evaluation against human-produced reference text. We choose hyperparameters for our models (beam size, and parameters ? and ?) to maximize task metrics on each dataset's development set; see Appendix A.2 for the settings used.: Test results for the E2E generation task, in comparison to the T-Gen baseline

Abstractive Summarization
We evaluate on the CNN/Daily Mail summarization dataset, using non-anonymized preprocessing. As in previous work, we evaluate using ROUGE and ME-TEOR. compares our pragmatic systems to the base S 0 model (with scores taken from Chen and Bansal (2018); we obtained comparable performance in our reproduction 3 ), an ensemble of two of these base models, and the best previous abstractive summarization result for each metric on this dataset. We also report two extractive baselines: Lead-3, which uses the first three sentences of the document as the summary, and Inputs, the concatenation of the extracted sentences used as inputs to our models (i.e., i (1) , . . . , i (P ) ).
The pragmatic methods obtain improvements of 0.2-0.5 in ROUGE scores and 0.2-1.8 METEOR over the base S 0 model, with the distractor-based approach SD 1 outperforming the reconstructorbased approach S R 1 . SD 1 is strong across all metrics, obtaining results competitive to the best previous abstractive systems.  (b) Coverage ratios by attribute type (columns) for the base model S0, and for the pragmatic system SD 1 when constructing the distractor by masking the specified attribute (rows). Cell colors are the degree the coverage ratio increases (green) or decreases (red) relative to S0.: Coverage ratios for the E2E task by attribute type, estimating how frequently the values for each attribute from the input meaning representations are mentioned in the output text.

Analysis
The base speaker S 0 model is often underinformative, e.g., for the E2E task failing to mention certain attributes of a MR, even though almost all the training examples incorporate all of them. To better understand the performance improvements from the pragmatic models for E2E, we compute a coverage ratio as a proxy measure of how well content in the input is preserved in the generated outputs. The coverage ratio for each attribute is the fraction of times there is an exact match between the text in the generated output and the attribute's value in the source MR (for instances where the attribute is specified). 4(a) shows coverage ratio by attribute category for all models. The S R 1 model increases the coverage ratio when compared to S 0 across all attributes, showing that using the reconstruction model score to select outputs does lead to an increase in mentions for each attribute. Coverage ratios increase for SD 1 as well in four out of six categories, but the increase is typically less than that produced by S R 1 . While SD 1 optimizes less explicitly for attribute mentions than S R 1 , it still provides a potential method to control generated outputs by choosing alternate distractors. shows coverage ratios for SD 1 when masking only a single attribute in the distractor. The highest coverage ratio for each attribute is usually obtained when masking that attribute in the distractor MR (entries on the main diagonal, underlined), in particular for FAMILYFRIENDLY (FF), FOOD, PRICERANGE (PR), and AREA. However, masking a single attribute sometimes results in decreasing the coverage ratio, and we also observe substantial increases from masking other attributes: e.g., masking either FAMILYFRIENDLY or CUSTOMERRAT-ING (CR) produces an equal increase in coverage ratio for the CUSTOMERRATING attribute. This may reflect underlying correlations in the training data, as these two attributes have a small number of possible values (3 and 7, respectively).

Conclusion
Our results show that S 0 models from previous work, while strong, still imperfectly capture the behavior that people exhibit when generating text; and an explicit pragmatic modeling procedure can improve results. Both pragmatic methods evaluated in this paper encourage prediction of outputs that can be used to identify their inputs, either by reconstructing inputs in their entirety or distinguishing true inputs from distractors, so it is perhaps unsurprising that both methods produce similar improvements in performance. Future work might allow finer-grained modeling of the tradeoff between underand over-informativity within the sequence generation pipeline (e.g., with a learned communication cost model) or explore applications of pragmatics for content selection earlier in the generation pipeline.

A Supplemental Material

A.1 Reconstructor Model Details
For the reconstructor-based speaker in the E2E task, we first follow the same data preprocessing steps as, which includes a delexicalization module that deals with sparsely occurring MR attributes (NAME, by mapping such values to placeholder tokens. MRs have only a few possible values for most attributes: six out of eight attributes have fewer than seven unique values, and the remaining two attributes (NAME, NEAR) are handled by our S 0 and SD 1 using delexicalized placeholders, following. In this way, the reconstructor only needs to predict the presence of these two attributes with a boolean variable, and other attributes with the corresponding categorical variable. We use a one layer bi-directional GRU  for the shared sentence encoder. We concatenate the latent vectors from both directions to construct a bi-directional encoded vector hi for every single word vector d i as:
Since not all words contribute equally to predicting each MR attribute, we thus use an attention mechanism  to determine the importance of every single word. The aggregated sentence vector for task k is calculated by
The task-specific sentence representation is then used as input to k layers with softmax outputs, returning a probability vector Y (k) for each of the k MR attributes.

A.2 Hyperparameters
For structured generation, we use beam size 10, ? = 0.4, and ? = 0.2, tuned to maximize the normalized average of all five metrics on the development set.
For abstractive summarization, we use beam size 20, ? = 0.9, and ? = 1.0, tuned to maximize ROUGE-L on the development set.