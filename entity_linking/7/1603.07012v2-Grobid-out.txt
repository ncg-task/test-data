title
Semi-supervised Word Sense Disambiguation with Neural Models
abstract
Determining the intended sense of words in text -word sense disambiguation (WSD) -is a longstanding problem in natural language processing. Recently, researchers have shown promising results using word vectors extracted from a neural network language model as features in WSD algorithms. However, a simple average or concatenation of word vectors for each word in a text loses the sequential and syntactic information of the text. In this paper, we study WSD with a sequence learning neural net, LSTM, to better capture the sequential and syntactic patterns of the text. To alleviate the lack of training data in all-words WSD, we employ the same LSTM in a semi-supervised label propagation classifier. We demonstrate state-of-the-art results, especially on verbs.
This work is licensed under a Creative Commons Attribution 4.0 International License. License details:
Introduction
Word sense disambiguation (WSD) is a long-standing problem in natural language processing (NLP) with broad applications. Supervised, unsupervised, and knowledge-based approaches have been studied for WSD. However, for all-words WSD, where all words in a corpus need to be annotated with word senses, it has proven extremely challenging to beat the strong baseline, which always assigns the most frequent sense of a word without considering the context. Given the good performance of published supervised WSD systems when provided with significant training data on specific words, it appears lack of sufficient labeled training data for large vocabularies is the central problem.
One way to leverage unlabeled data is to train a neural network language model (NNLM) on the data. Word embeddings extracted from such a NNLM (often Word2Vec) can be incorporated as features into a WSD algorithm. show that this can substantially improve WSD performance and indeed that competitive performance can be attained using word embeddings alone.
In this paper, we describe two novel WSD algorithms. The first is based on a Long Short Term Memory (LSTM)). Since this model is able to take into account word order when classifying, it performs significantly better than an algorithm based on a continuous bag of words model (Word2vec), especially on verbs.
We then present a semi-supervised algorithm which uses label propagation to label unlabeled sentences based on their similarity to labeled ones. This allows us to better estimate the distribution of word senses, obtaining more accurate decision boundaries and higher classification accuracy.
The best performance was achieved by using an LSTM language model with label propagation. Our algorithm achieves state-of-art performance on many SemEval all-words tasks. It also outperforms the most-frequent-sense and Word2Vec baselines by 10% (see Section 5.2 for details).

Related Work
The development of large lexical resources, such as WordNet and BabelNet, has enabled knowledge-based algorithms which show promising results on allwords prediction tasks. WSD algorithms based on supervised learning are generally believed to perform better than knowledgebased WSD algorithms, but they need large training sets to perform well. Acquiring large training sets is costly. In this paper, we show that a supervised WSD algorithm can perform well with ? 20 training examples per sense.
In the past few years, much progress has been made on using neural networks to learn word embeddings, to construct language models, perform sentiment analysis, machine translation and many other NLP applications.
A number of different ways have been studied for using word embeddings in WSD. There are some common elements:
• Context embeddings. Given a window of text w n?k , ..., w n , ..., w n+k surrounding a focus word w n (whose label is either known in the case of example sentences or to be determined in the case of classification), an embedding for the context is computed as a concatenation or weighted sum of the embeddings of the words w i , i = n. Context embeddings of various kinds are used in both and. • Sense embeddings. Embeddings are computed for each word sense in the word sense inventory (e.g. WordNet). In, equations are derived relating embeddings for word senses with embeddings for undisambiguated words. The equations are solved to compute the sense embeddings. In, sense embeddings are computed first as weighted sums of the embeddings of words in the WordNet gloss for each sense. These are used in an initial bootstrapping WSD phase, and then refined by a neural network which is trained on this bootstrap data. • Embeddings as SVM features. Context embeddings, or features computed by combining context embeddings with sense embeddings, can be used as additional features in a supervised WSD system e.g. the SVMbased IMS. Indeed found that using embeddings as the only features in IMS gave competitive WSD performance. • Nearest neighbor classifier. Another way to perform classification is to find the word sense whose sense embedding is closest, as measured by cosine similarity, to the embedding of the classification context. This is used, for example, in the bootstrapping phase of. • Retraining embeddings. A feedforward neural network can be used to jointly perform WSD and adjust embeddings. In our work, we start with a baseline classifier which uses 1000-dimensional embeddings trained on a 100 billion word news corpus using Word2Vec. The vocabulary consists of the most frequent 1, 000, 000 words, without lemmatization or case normalization. Sense embeddings are computed by averaging the context embeddings of sentences which have been labeled with that sense. To classify a word in a context, we assign the word sense whose embedding has maximal cosine similarity with the embedding of the context. This classifier has similar performance to the best classifier in when SemCor is used as a source of labeled sentences. The Word2Vec embeddings are trained using a bag of words model, i.e. without considering word order in the training context, and word order is also not considered in the classification context. In Section 3 we show that using a more expressive language model which takes account of word order yields significant improvements.
Semi-supervised learning has previously been applied successfully to word sense disambiguation. In bootstrapping was used to learn a high precision WSD classifier. A low recall classifier was learned from a small set of labeled examples, and the labeled set then extended with those sentences from an unlabeled corpus which the classifier could label with high confidence. The classifier was then retrained, and this iterative training process continued to convergence. Additional heuristics helped to maintain the stability of the bootstrapping process. The method was evaluated on a small data set.
In, a label propagation algorithm was proposed for word sense disambiguation and compared to bootstrapping and a SVM supervised classifier. Label propagation can achieve better performance because it assigns labels to optimize a global objective, whereas bootstrapping propagates labels based on local similarity of examples.
In Section 4 we describe our use of label propagation to improve on nearest neighbor for classification.

Supervised WSD with LSTM
Neural networks with long short-term memory (LSTM) units) make good language models which take into account word order. We train a LSTM language model to predict the held-out word in a sentence. As shown in, we first replace the held-out word with a special symbol $, and then, after consuming the remaining words in the sentence, project the h dimensional hidden layer to a p dimensional context layer, and finally predict the held out word with softmax. By default, the LSTM model has 2048 hidden units, 512 dimensional context layer and 512 dimensional word embeddings. We also studied other settings, see Section 5.2.2 for details. We train the LSTM on a news corpus of about 100 billion tokens, with a vocabulary of 1, 000, 000 words. Words in the vocabulary are neither lemmatized nor case normalized. Our LSTM model is different from that of Kgebck and Salomonsson. We train a LSTM language model, which predicts a held-out word given the surrounding context, with a large amount of unlabeled text as training data. The huge training dataset allows us to train a high-capacity model (2048 hidden units, 512 dimensional embeddings), which achieves high precision without overfitting. In our experiments, this directional LSTM model was faster and easier to train than a bidirectional LSTM, especially given our huge training dataset. Kgebck and Salomonsson's LSTM directly predicts the word senses and it is trained with a limited number of word sense-labeled examples. Although regularization and dropout are used to avoid overfitting the training data, the bidirectional LSTM is small with only 74 + 74 neurons and 100 dimensional word embeddings. Because our LSTM is generally applicable to any word, it achieves high performance on all-words WSD tasks (see Section 5 for details), which is the focus of this paper. Kgebck and Salomonsson's LSTM is only evaluated on lexical sample WSD tasks of SemEval 2 and 3.
Ht+3 Ht+4 The behavior of the LSTM can be intuited by its predictions. shows the top 10 words predicted by an LSTM language model for the word 'stock' in sentences containing various senses of 'stock'.
In our initial experiments, we computed similarity between two contexts by the overlap between their bags of predicted words. For example the top predictions for the query overlap most with the LSTM predictions for 'sense#1' -we predict that 'sense#1' is the correct sense. This bag of predictions, while easily interpretable, is just a discrete approximation to the internal state of the LSTM when predicting the held out word. We therefore directly use the LSTM's context layer from which the bag of predictions was computed as a representation of the context (see). Given context vectors extracted from the LSTM, our supervised WSD algorithms classify a word in a context by finding the sense vector which has maximum cosine similarity to the context vector). We find the sense vectors foods, food, vegetables, meats, recipes, cheese, meat, chicken, pasta, milk sense#3 query In addition, they will receive stock in the reorganized company, which will be named Ranger Industries Inc.
shares, positions, equity, jobs, awards, representation, stock, investments, roles, funds ?: Top predictions of 'stock' in 5 sentences of different word senses by averaging context vectors of all training sentences of the same sense. We observed in a few cases that the context vector is far from the held-out word's embedding, especially when the input sentence is not informative. For example, the LSTM language model will predict "night" for the input sentence "I fell asleep at." when we holdout "work". Currently, we treat the above cases as outliers. We would like explore alternative solutions, e.g., forcing the model to predict words that are close to one sense vector of the held-out word, in further work. As can be seen in SemEval all-words tasks and Tables 6, this LSTM model has significantly better performance than the Word2Vec models. The non-parametric nearest neighbor algorithm described in Section 3 has the following drawbacks:
• It assumes a spherical shape for each sense cluster, being unable to accurately model the decision boundaries given the limited number of examples. • It has no training data for, and does not model, the sense prior, omitting an extremely powerful potential signal. To overcome these drawbacks we present a semi-supervised method which augments the labeled example sentences with a large number of unlabeled sentences from the web. Sense labels are then propagated from the labeled to the unlabeled sentences. Adding a large number of unlabeled sentences allows the decision boundary between different senses to be better approximated.
A label-propagation graph consists of (a) vertices with a number of labeled seed nodes and (b) undirected weighted edges. Label propagation (LP) (Talukdar and Crammer, 2009) iteratively computes a distribution of labels on the graph's vertices to minimize a weighted combination of:
• The discrepancy between seed labels and their computed labels distributions.
• The disagreement between the label distributions of connected vertices.
• A regularization term which penalizes distributions which differ from the prior (by default, a uniform distribution). We construct a graph for each lemma with labeled vertices for the labeled example sentences, and unlabeled vertices for sentences containing the lemma, drawn from some additional corpus. Vertices for sufficiently similar sentences (based on criteria discussed below) are connected by an edge whose weight is the cosine similarity between the respective context vectors, using the LSTM language model. To classify an occurrence of the lemma, we create an additional vertex for the new sentence and run LP to propagate the sense labels from the seed vertices to the unlabeled vertices. illustrates the graph configuration. Spatial proximity represents similarity of the sentences attached to each vertex and the shape of each node represents the word sense. Filled nodes represent seed nodes with known word senses. Unfilled nodes represent sentences with no word sense label, and the ? represents the word we want to classify.
With too many edges, sense labels propagate too far, giving low precision. With too few, sense labels do not propagate sufficiently, giving low recall. We found that the graph has about the right density for common senses when we ranked vertex pairs by similarity and connected the pairs above the 95 percentile. This may still leave rare senses sparsely connected, so we additionally added edges to ensure that every vertex is connected to at least 10 other vertices. Our experiments show that this setting achieves good performance on WSD, and the performance is stable when the percentile ranges between 85 to 98. Since it requires running LP for every classification, the algorithm is slow compared to the nearest neighbor algorithm.

Experiments
We evaluated the LSTM algorithm with and without label propagation on standard SemEval all-words tasks using WordNet as the inventory. Our proposed algorithms achieve state-of-art performance on many SemEval all-words WSD tasks. In order to assess the effects of training corpus size and language model capacity we also evaluate our algorithms using the New Oxford American Dictionary (NOAD) inventory with or MASC 1 .

SemEval Tasks
In this section, we study the performance of our classifiers on Senseval2, Senseval3,, SemEval-2013 Task 12) and SemEval-2015 task 13 2 . We focus the study on all-words WSD tasks. For a fair comparison with related works, the classifiers are evaluated on all words (both polysemous and monosemous).
Following related works, we use SemCor or OMSTI for training. In our LP classifiers, unlabeled data for each lemma consists either of 1000 sentences which contain the lemma, randomly sampled from the web, or all OMSTI sentences (without labels) which contain the lemma. shows the Sem-Eval results. Our proposed algorithms achieve the highest all-words F1 scores except for Sem-Eval 2013. only disambiguates nouns, and it outperforms our algorithms on Sem-Eval 2013 by 4%, but is ranked behind our algorithms on Senseval-3 and SemEval-7 tasks with an F1 score more than 6% lower than our algorithms. Unified WSD has the highest F1 score on Nouns (Sem-Eval-7 Coarse), but our algorithms outperform Unified WSD on other part-of-speech tags.
Settings For a fair comparison of Word2Vec and LSTM, we do not use pre-trained word-embeddings as in, but instead train the Word2Vec and LSTM models on a 100 billion word news corpus 3 with a vocabulary of the most frequent 1,000,000 words. Our self-trained word embeddings have similar performance to the pre-trained embeddings, as shown in. The Word2Vec word vectors are of dimension 1024. The LSTM model has 2048 hidden units, and inputs are 512-dimensional word vectors. We train the LSTM model by minimizing sampled softmax loss with Adagrad. The learning rate is 0.1. We experimented with other learning rates, and observed no significant performance difference after the training converges. We also downsample frequent terms in the same way as.
Word2Vec vectors Vs. LSTM To better compare LSTM with word vectors we also build a nearest neighbor classifier using Word2Vec word embeddings and SemCor example sentences, Word2Vec (T:SemCor). It performs similar to IMS + Word2Vec (T:SemCor), a SVM-based classifier studied in. shows that the LSTM classifier outperforms the Word2Vec classifier across the board.
SemCor Vs. OMSTI Contrary to the results observed in, the LSTM classifier trained with OMSTI performs worse than that trained with SemCor. It seems that the larger size of the OMSTI training data set is more than offset by noise present in its automatically generated labels. While the SVM classifier studied in maybe able to learn a model which copes with this noise, our naive nearest neighbor classifiers do not have a learned model and deal less well with noisy labels.

Label propagation
We use the implementation of DIST EXPANDER. We test the label propagation algorithm with SemCor or OMSTI as labeled data sets and OMSTI or 1000 random sentences from the web per lemma as unlabeled data. The algorithm performs similarly on the different data sets.

NOAD Eval
Many dictionary lemmas and senses have no examples in SemCor or OSTMI, giving rise to losses in allwords WSD when these corpora are used as training data. The above SemEval scores do not distinguish errors caused by missing training data for certain labels or inaccurate classifier. To better study the proposed algorithms, we train the classifiers with the New Oxford American Dictionary (NOAD), in which there are example sentences for each word sense.

Word Sense Inventory
The NOAD focuses on American English and is based on the Oxford Dictionary of English (ODE). It distinguishes between coarse (core) and fine-grained (sub) word senses in the same manner as ODE. Previous investigations using the ODE have shown that coarse-grained word senses induced by the ODE inventory address problems with WordNet's fine-grained inventory, and that the inventory is useful for word sense disambiguation.
For our experiments, we use NOAD's core senses, and we also use lexicographer-curated example sentences from the Semantic English Language Database (SELD) 4 , provided by Oxford University Press. We manually annotated all words of the English language SemCor corpus and MASC corpora with NOAD word senses in order to evaluate performance 5 . shows the total number of polysemes (more than one core sense) and average number of senses per polyseme in NOAD/SELD (hereafter, NOAD), SemCor and MASC. Both SemCor and MASC individually cover around 45% of NOAD polysemes and 62% of senses of those polysemes. gives the number of labeled sentences of these datasets. Note that although NOAD has more labeled sentences than SemCor or MASC, the average numbers of sentences per sense of these datasets are similar. This is because NOAD has labeled sentences for each word sense, whereas SemCor (MASC) only covers a subset of lemmas and senses). The last column of shows that each annotated word in SemCor and MASC has an average of more than 4 NOAD corse senses. Hence, a random guess will have a precision around 1/4.  In the default setting, we use NOAD example sentences as labeled training data and evaluate on Sem-Cor and MASC. We evaluate all polysemous words in the evaluation corpus.

LSTM classifier
We compare our algorithms with two baseline algorithms:
• Most frequent sense: Compute the sense frequency (from a labeled corpus) and label word w with w's most frequent sense. • Word2Vec: a nearest-neighbor classifier with Word2Vec word embedding, which has similar performance to cutting-edge algorithms studied in on SemEval tasks. compares the F1 scores of the LSTM and baseline algorithms. LSTM outperforms Word2Vec by more than 10% overall words, where most of the gains are from verbs and adverbs. The results suggest that syntactic information, which is well modeled by LSTM but ignored by Word2Vec, is important to distinguishing word senses of verbs and adverbs.   Change of training data By default, the WSD classifier uses the NOAD example sentences as training data. We build a larger training dataset by adding labeled sentences from SemCor and MASC, and study the change of F1 scores in. Across all part of speech tags and datasets, F1 scores increase after adding more training data. We further test our algorithm by using SemCor (or MASC) as training data (without NOAD examples). The SemCor (or MASC) trained classifier is on a par with the NOAD trained classifier on F1 score. However, the macro F1 score of the former is much lower than the latter, as shown in, because of the limited coverage of rare senses and words in SemCor and MASC.
Change of language model capacity In this experiment, we change the LSTM model capacity by varying the number of hidden units hand the dimensions of the input embeddings p and measuring F1. shows strong positive correlation between F1 and the capacity of the language model. However, larger models are slower to train and use more memory. To balance the accuracy and resource usage, we use the second best LSTM model (h = 2048 and p = 512) by default.

Semi-supervised WSD
We evaluate our semi-supervised WSD classifier in this subsection. We construct the graph as described in Section 4 and run LP to propagate sense labels from the seed vertices to the unlabeled vertices. We evaluate the performance of the algorithm by comparing the predicted labels and the gold labels on eval nodes. As can be observed from, LP did not yield clear benefits when using the Word2Vec language model. We did see significant improvements, 6.3% increase on SemCor and 7.3% increase on MASC, using LP with the LSTM language model. We hypothesize that this is because LP is sensitive to the quality of the graph distance metric.  Change of seed data: As can be seen in, LP substantially improves classifier F1 when the training datasets are SemCor+NOAD or MASC+NOAD. As discussed in Section 4, the improvement may come from explicitly modeling the sense prior. We did not see much performance lift by increasing the number of unlabeled sentences per lemma.
Change of graph density: By default, we construct the LP graph by connecting two nodes if their affinity is above 95% percentile. We also force each node to connect to at least 10 neighbors to prevent isolated nodes. shows the performance of the LP algorithm by changing the percentile threshold. The F1 scores are relatively stable when the percentile ranges between 85 to 98, but decrease when the percentile drops to 80. Also, it takes longer to run the LP algorithm on a denser graph. We pick the 95 percentile in our default setting to achieve both high F1 scores and short running time.: F1 scores of the LSTM LP trained on NOAD with varying graph density.

Conclusions and Future Work
In this paper, we have presented two WSD algorithms which combine (1) LSTM neural network language models trained on a large unlabeled text corpus, with (2) labeled data in the form of example sentences, and, optionally, (3) unlabeled data in the form of additional sentences. Using an LSTM language model gave better performance than one based on Word2Vec embeddings. The best performance was achieved by our semi-supervised WSD algorithm which builds a graph containing labeled example sentences augmented with a large number of unlabeled sentences from the web, and classifies by propagating sense labels through this graph. Several unanswered questions suggest lines of future work. Since our general approach is amenable to incorporating any language model, further developments in NNLMs may permit increased performance. We would also like to better understand the limitations of language modeling for this task: we expect there are situations -e.g., in idiomatic phrases -where per-word predictions carry little information.
We believe our model should generalize to languages other than English, but have not yet explored this. Character-level LSTMs may provide robustness to morphology and diacritics and may prove useful even in English for spelling errors and out of vocabulary words.