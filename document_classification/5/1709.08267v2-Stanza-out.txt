title
HDLTex : Hierarchical Deep Learning for Text Classification
abstract
Increasingly large document collections require improved information processing methods for searching , retrieving , and organizing text .
Central to these information processing methods is document classification , which has become an important application for supervised learning .
Recently the performance of traditional supervised classifiers has degraded as the number of documents has increased .
This is because along with growth in the number of documents has come an increase in the number of categories .
This paper approaches this problem differently from current document classification methods that view the problem as multi-class classification .
Instead we perform hierarchical classification using an approach we call Hierarchical Deep Learning for Text classification ( HDLTex ) .
HDLTex employs stacks of deep learning architectures to provide specialized understanding at each level of the document hierarchy .
I. INTRODUCTION
Each year scientific researchers produce a massive number of documents .
In 2014 the 28,100 active , scholarly , peerreviewed , English - language journals published about 2.5 million articles , and there is evidence that the rate of growth in both new journals and publications is accelerating .
The volume of these documents has made automatic organization and classification an essential element for the advancement of basic and applied research .
Much of the recent work on automatic document classification has involved supervised learning techniques such as classification trees , nave Bayes , support vector machines ( SVM ) , neural nets , and ensemble methods .
Classification trees and nave Bayes approaches provide good interpretability but tend to be less accurate than the other methods .
However , automatic classification has become increasingly challenging over the last several years due to growth in corpus sizes and the number of fields and sub-fields .
Areas of research that were little known only five years ago have now become areas of high growth and interest .
This growth in sub-fields has occurred across a range of disciplines including biology ( e.g. , CRISPR - CA9 ) , material science ( e.g. , chemical programming ) , and health sciences ( e.g. , precision medicine ) .
This growth in sub-fields means that it is important to not just label a document by specialized area but to also organize it within its over all field and the accompanying sub-field .
This is hierarchical classification .
Although many existing approaches to document classification can quickly identify the over all area of a document , few of them can rapidly organize documents into the correct subfields or areas of specialization .
Further , the combination of top - level fields and all sub-fields presents current document classification approaches with a combinatorially increasing number of class labels that they can not handle .
This paper presents a new approach to hierarchical document classification that we call Hierarchical Deep Learning for Text classification ( HDLTex ) .
HDLTex combines deep learning architectures to allow both over all and specialized learning by level of the document hierarchy .
This paper reports our experiments with HDLTex , which exhibits improved accuracy over traditional document classification methods .
II .
RELATED WORK
Document classification is necessary to organize documents for retrieval , analysis , curation , and annotation .
Researchers have studied and developed a variety of methods for document classification .
Work in the information retrieval community has focused on search engine fundamentals such as indexing and dictionaries thatare considered core technologies in this field .
Considerable work has built on these foundational methods to provide improvements through feedback and query reformulation , .
More recent work has employed methods from data mining and machine learning .
Among the most accurate of these techniques is the support vector machine ( SVM ) - .
SVMs use kernel functions to find separating hyperplanes in high - dimensional spaces .
Other kernel methods used for information retrieval include string kernels such as the spectrum kernel and the mismatch kernel , which are widely used with DNA and RNA sequence data .
SVM and related methods are difficult to interpret .
For this reason many information retrieval systems use decision trees and nave Bayes , methods .
These methods are easier to understand and , as such , can support query reformulation , but they lack accuracy .
Some recent work has investigated topic modeling to provide similar interpretations as nave Bayes methods but with improved accuracy .
This paper uses newer methods of machine learning for document classification taken from deep learning .
Deep learning is an efficient version of neural networks that can perform unsupervised , supervised , and semi-supervised learning .
Deep learning has been extensively used for image processing , but many recent studies have applied deep learning in other domains such as text and data mining .
The basic architecture in a neural network is a fully connected network of nonlinear processing nodes organized as layers .
The first layer is the input layer , the final layer is the output layer , and all other layers are hidden .
In this paper , we will refer to these fully connected networks as Deep Neural Networks ( DNN ) .
Convolutional Neural Networks ( CNNs ) are modeled after the architecture of the visual cortex where neurons are not fully connected but are spatially distinct .
CNNs provide excellent results in generalizing the classification of objects in images .
More recent work has used CNNs for text mining .
In research closely related to the work in this paper , Zhang et al.
used CNNs for text classification with character - level features provided by a fully connected DNN .
Regardless of the application , CNNs require large training sets .
Another fundamental deep learning architecture used in this paper is the Recurrent Neural Network ( RNN ) .
RNNs connect the output of a layer back to its input .
This architecture is particularly important for learning time - dependent structures to include words or characters in text .
Deep learning for hierarchical classification is not new with this paper , although the specific architectures , the comparative analyses , and the application to document classification are new .
Salakhutdinov , used deep learning to hierarchically categorize images .
At the top level the images are labeled as animals or vehicles .
The next level then classifies the kind of animal or vehicle .
This paper describes the use of deep learning approaches to create a hierarchical document classification approach .
These deep learning methods have the promise of providing greater accuracy than SVM and related methods .
Deep learning methods also provide flexible architectures that we have used to produce hierarchical classifications .
The hierarchical classification our methods produce is not only highly accurate but also enables greater understanding of the resulting classification by showing where the document sits within afield or area of study .
III .
BASELINE TECHNIQUES
This paper compares fifteen methods for performing document classification .
Six of these methods are baselines since they are used for traditional , non-hierarchical document classification .
Of the six baseline methods three are widely used for document classification : term - weighted support vector machines , multi-word support vector machines , and nave Bayes classification ( NBC ) .
The other three are newer deep learning methods that form the basis for our implementation of a new approach for hierarchical document classification .
These deep learning methods are described in Section V .
A. Support Vector Machines ( SVMs )
Vapnik and Chervonenkis introduced the SVM in 1963 , , and in 1992 Boser et al. introduced a nonlinear version to address more complex classification problems .
The key idea of the nonlinear SVM is the generating kernel shown in Equation 1 , followed by Equations 2 and 3 :
Multi - Class SVM : Text classification using string kernels within SVMs has been successful in many research projects .
The original SVM solves a binary classification problem ; however , since document classification often involves several classes , the binary SVM requires an extension .
In general , the multi-class SVM ( MSVM ) solves the following optimization :
where k indicates number of classes , ?
i are slack variables , and w is the learning parameter .
To solve the MSVM we construct a decision function of all k classes at once , .
One approach to MSVM is to use binary SVM to compare each of the k ( k ?
1 ) pairwise classification labels , where k is the number of labels or classes .
Yet another technique for MSVM is one - versus - all , where the two classes are one of the k labels versus all of the other k ?
1 labels .
Stacking Support Vector Machines ( SVM ) :
We use Stacking SVMs as another baseline method for comparison with HDL - Tex .
The stacking SVM provides an ensemble of individual SVM classifiers and generally produces more accurate results than single - SVM models , .
B. Nave Bayes classification
Nave Bayes is a simple supervised learning technique often used for information retrieval due to its speed and interpretability , .
Suppose the number of documents is n and each document has the label c , c ? {c 1 , c 2 , ... , ck } , where k is the number of labels .
Nave Bayes calculates where d is the document , resulting in
The nave Bayes document classifier used for this study uses word - level classification .
Let ?
j be the parameter for word j , then
IV .
FEATURE EXTRACTION
Documents enter our hierarchical models via features extracted from the text .
We employed different feature extraction approaches for the deep learning architectures we built .
For CNN and RNN , we used the text vector - space models using 100 dimensions as described in Glove .
A vector-space model is a mathematical mapping of the word space , defined as
where l j is the length of the document j , and w i , j is the Glove word embedding vectorization of word i in document j.
For DNN , we used count - based and term frequency - inverse document frequency ( tf - idf ) for feature extraction .
This approach uses counts for N - grams , which are sequences of N words , .
For example , the text " In this paper we introduced this technique " is composed of the following Ngrams :
Feature count ( 1 ) : { ( In , 1 ) , ( this , 2 ) , ( paper , 1 ) , ( we , 1 ) , ( introduced , 1 ) , ( technique , 1 ) } Feature count ( 2 ) : { ( In , 1 ) , ( this , 2 ) , ( paper , 1 ) , ( we , 1 ) , ( introduced , 1 ) , ( technique , 1 ) , ( In this , 1 ) , ( This paper , 1 ) , ( paper we , 1 ) , ...}
Where the counts are indexed by the maximum N - grams .
So Feature count ( 2 ) includes both 1 - grams and 2 - grams .
The resulting DNN feature space is
where f is the feature space of document j for n-grams of size n , n ? { 0 , 1 , ... , N } , and x is determined byword or ngram counts .
Our algorithm is able to use N-grams for features within deep learning models .
V .
DEEP LEARNING NEURAL NETWORKS
The methods used in this paper extend the concepts of deep learning neural networks to the hierarchical document classification problem .
Deep learning neural networks provide efficient computational models using combinations of nonlinear processing elements organized in layers .
This organization of simple elements allows the total network to generalize ( i.e. , predict correctly on new data ) .
In the research described here , we used several different deep learning techniques and combinations of these techniques to create hierarchical document classifiers .
The following subsections provide an overview of the three deep learning architectures we used : Deep Neural Networks ( DNN ) , Recurrent Neural Networks ( RNN ) , and Convolutional Neural Networks ( CNN ) .
A. Deep Neural Networks ( DNN )
In the DNN architecture each layer only receives input from the previous layer and outputs to the next layer .
The layers are fully connected .
The input layer consists of the text features ( see IV ) and the output layer has anode for each classification label or only one node if it is a binary classification .
This architecture is the baseline DNN .
Additional details on this architecture can be found in . This paper extends this baseline architecture to allow hierarchical classification .
shows this new architecture .
The DNN for the first level of classification ( on the left side in ) is the same as the baseline DNN .
The second level classification in the hierarchy consists of a DNN trained for the domain output in the first hierarchical level .
Each second level in the DNN is connected to the output of the first level .
For example , if the output of the first model is labeled computer science then the DNN in the next hierarchical level ( e.g. , ? 1 in ) is trained only with all computer science documents .
So while the first hierarchical level DNN is trained with all documents , each DNN in the next level of the document hierarchy is trained only with the documents for the specified domain .
LSTM / GRU
The DNNs in this study are trained with the standard backpropagation algorithm using both sigmoid ( Equation 11 ) and ReLU ( Equation 12 ) as activation functions .
The output layer uses softmax ( Equation 13 ) .
? j ? { 1 , . . . , K}
Given a set of example pairs ( x , y ) , x ?
X , y ?
Y the goal is to learn from the input and target spaces using hidden layers .
In text classification , the input is generated by vectorization of text ( see Section IV ) .
B. Recurrent Neural Networks ( RNN )
The second deep learning neural network architecture we use is RNN .
In RNN the output from a layer of nodes can reenter as input to that layer .
This approach has advantages for text processing .
The general RNN formulation is given in Equation 14 where x t is the state at time t and u t refers to the input at step t.
We use weights to reformulate Equation 14 as shown in below :
In Equation , W rec is the recurrent matrix weight , W in are the input weights , b is the bias , and ?
is an element - wise function .
Again we have modified the basic architecture for use in hierarchical classification .
shows this extended RNN architecture .
Several problems ( e.g. , vanishing and exploding gradients ) arise in RNNs when the error of the gradient descent algorithm is back - propagated through the network .
To deal with these problems , long short - term memory ( LSTM ) is a special type of RNN that preserves long - term dependencies in a more effective way compared with the basic RNN .
This is particularly effective at mitigating the vanishing gradient problem .
shows the basic cell of an LSTM model .
Although LSTM has a chain - like structure similar to RNN , LSTM uses multiple gates to regulate the amount of information allowed into each node state .
A step - by - step explanation the LSTM cell and it s gates is provided below :
1 ) Input Gate :
2 ) Candid Memory Cell Value :
3 ) Forget Gate Activation :
4 ) New Memory Cell Value :
5 ) Output Gate Values :
In the above description , b is a bias vector , Wis a weight matrix , and x t is the input to the memory cell at time t.
The i , c , f and o indices refer to input , cell memory , forget and output gates , respectively .
shows the structure of these gates with a graphical representation .
An RNN can be biased when later words are more influential than the earlier ones .
To overcome this bias convolutional neural network ( CNN ) models ( discussed in Section V - C ) include a max - pooling layer to determine discriminative phrases in text .
A gated recurrent unit ( GRU ) is a gating mechanism for RNNs that was introduced in 2014 .
GRU is a simplified variant of the LSTM architecture , but there are differences as follows :
GRUs contain two gates , they do not possess internal memory ( the C t?1 in , and a second non-linearity is not applied ( tanh in ) .
C. Convolutional Neural Networks ( CNN )
The final deep learning approach we developed for hierarchical document classification is the convolutional neural network ( CNN ) .
Although originally built for image processing , as discussed in Section II , CNNs have also been effectively used for text classification .
The basic convolutional layer in a CNN connects to a small subset of the inputs usually of size 3 3 . Similarly the next convolutional layer connects to only a subset of its preceding layer .
In this way these convolution layers , called feature maps , can be stacked to provide multiple filters on the input .
To reduce computational complexity , CNNs use pooling to reduce the size of the output from one stack of layers to the next in the network .
Different pooling techniques are used to reduce outputs while preserving important features .
The most common pooling method is max - pooling where the maximum element is selected in the pooling window .
In order to feed the pooled output from stacked featured maps to the next layer , the maps are flattened into one column .
The final layers in a CNN are typically fully connected .
In general during the back - propagation step of a CNN not only the weights are adjusted but also the feature detector filters .
A potential problem of CNNs used for text is the number of channels or size of the feature space .
This might be very large ( e.g. , 50 K words ) for text , but for images this is less of a problem ( e.g. , only 3 channels of RGB ) .
D. Hierarchical Deep Learning
The primary contribution of this research is hierarchical classification of documents .
A traditional multi-class classification technique can work well for a limited number classes , but performance drops with increasing number of classes , as is present in hierarchically organized documents .
In our hierarchical deep learning model we solve this problem by creating architectures that specialize deep learning approaches for their level of the document hierarchy ( e.g. , see ) .
The structure of our Hierarchical Deep Learning for Text ( HDLTex ) architecture for each deep learning model is as follows :
DNN : 8 hidden layers with 1024 cells in each hidden layer .
RNN : GRU and LSTM are used in this implementation , 100 cells with GRU with two hidden layers .
CNN : Filter sizes of { 3 , 4 , 5 , 6 , 7 } and max - pool of 5 , layer sizes of { 128 , 128 , 128 } with max pooling of { 5 , 5 , 35 } , the CNN contains 8 hidden layers .
All models used the following parameters :
Batch Size = 128 , learning parameters = 0.001 , ? 1 = 0.9 , ? 2 = 0.999 , = 1e 08 , decay = 0.0 , Dropout=0.5 ( DNN ) and Dropout = 0.25 ( CNN and RNN ) .
E. Evaluation
We used the following cost function for the deep learning models :
where is the number of levels , k indicates number of classes for each level , and ?
refers to the number of classes in the child 's level of the hierarchical model .
F. Optimization
We used two types of stochastic gradient optimization for the deep learning models in this paper : RMSProp and Adam .
These are described below .
RMSProp Optimizer :
The basic stochastic gradient descent ( SGD ) is shown below :
For these equations , ?
is the learning parameter , ?
is the learning rate , and J ( ? , x i , y i ) is the objective or cost function .
The history of updates is defined by ? ?
( 0 , 1 ) .
To update parameters , SGD uses a momentum term on a rescaled gradient , which is shown in Equation .
This approach to the optimization does not perform bias correction , which is a problem for a sparse gradient .
Adam Optimizer :
Adam is another stochastic gradient optimizer , which averages over only the first two moments of the gradient , v and m , as shown below :
where
In these equations , mt and v tare the first and second moments , respectively .
Both are estimated asm t = mt
This approach can handle the non-stationarity of the objective function as can RMSProp , but Adam can also overcome the sparse gradient issue that is a drawback in RMSProp .
VI .
RESULTS
A.
Data
Our document collection had 134 labels as shown in Table I .
The target value has two levels , k 0 ? { 1 , .. , 7 } which are k 0 ? {
Computer Science , Electrical Engineering , Psychology , Mechanical Engineering , Civil Engineering , Medical Science , biochemistry } and children levels of the labels , k , which contain { 17 , , 9 } specific topics belonging to k 0 , respectively .
To train and test the baseline methods described in Section III and the new hierarchical document classification methods described in Section V , we collected data and meta-data on 46 , 985 published papers available from the Web Of Science , .
To automate collection we used Selenium with Chorome Driver for the Chrome web browser .
To extract the data from the site we used Beautiful Soup .
We specifically extracted the abstract , domain , and keywords of this set of published papers .
The text in the abstract is the input for classification while the domain name provides the label for the top level of the hierarchy .
The keywords provide the descriptors for the next level in the classification hierarchy .
We divided the data set into three parts as shown in .
Data set W OS ?
46985 is the full data set with 46,985 documents , and data sets W OS ? 11967 and W OS ? 5736 are subsets of this full data set with the number of training and testing documents shown as well as the number of labels or classes in each of the two levels .
For dataset W OS ? 11967 , each of the seven level - 1 classes has five sub -classes .
For data set W OS ? 5736 , two of the three higher - level classes have four sub - classes and the last high - level class has three subclasses .
We removed all special characters from all three data sets before training and testing .
B. Hardware and Implementation
The following results were obtained using a combination of central processing units ( CPUs ) and graphical processing units ( GPUs ) .
The processing was done on a Xeon E5 ? 2640 ( 2.6 GHz ) with 32 cores and 64GB memory , and the GPU cards were N vidia Quadro K620 and N vidia Tesla K20c .
We implemented our approaches in Python using the Compute Unified Device Architecture ( CUDA ) , which is a parallel computing platform and Application Programming Interface ( API ) model created by N vidia .
We also used Keras and Tensor Flow libraries for creating the neural networks , .
shows the results from our experiments .
The baseline tests compare three conventional document classification approaches ( nave Bayes and two versions of SVM ) and stacking SVM with three deep learning approaches ( DNN , RNN , and CNN ) .
In this set of tests the RNN outperforms the others for all three W OS data sets .
CNN performs secondbest for three data sets .
SVM with term weighting is third for the first two sets while the multi-word approach of is in third place for the third data set .
The third data set is the smallest of the three and has the fewest labels so the differences among the three best performers are not large .
These results show that over all performance improvement for general document classification is obtainable with deep learning approaches compared to traditional methods .
Overall , nave Bayes does much worse than the other methods throughout these tests .
As for the tests of classifying these documents within a hierarchy , the HDLTex approaches with stacked , deep learning architectures clearly provide superior performance .
For data set W OS ? 11967 , the best accuracy is obtained by the combination RNN for the first level of classification and DNN for the second level .
This gives accuracies of 94 % for the first level , 92 % for the second level and 86 % over all .
This is significantly better than all of the others except for the combination of CNN and DNN .
For data set W OS ? 46985 the best scores are again achieved by RNN for level one but this time with RNN for level 2 .
The closest scores to this are obtained by CNN and RNN in levels 1 and 2 , respectively .
C. Empirical Results
Finally the simpler data set W OS ?
5736 has a winner in CNN at level 1 and CNN at level 2 , but there is little difference between these scores and those obtained by two other HDLTex architectures : DNN with CNN and RNN with CNN .
VII .
CONCLUSIONS AND FUTURE WORK
Document classification is an important problem to address , given the growing size of scientific literature and other document sets .
When documents are organized hierarchically , multi-class approaches are difficult to apply using traditional supervised learning methods .
This paper introduces a new approach to hierarchical document classification , HDLTex , that combines multiple deep learning approaches to produce hierarchical classifications .
Testing on a data set of documents obtained from the Web of Science shows that combinations of RNN at the higher level and DNN or CNN at the lower level produced accuracies consistently higher than those obtainable by conventional approaches using nave Bayes or SVM .
These results show that deep learning methods can provide improvements for document classification and that they provide flexibility to classify documents within a hierarchy .
Hence , they provide extensions over current methods for document classification that only consider the multi -class problem .
The methods described here can improved in multiple ways .
Additional training and testing with other hierarchically structured document data sets will continue to identify architectures that work best for these problems .
Also , it is possible to extend the hierarchy to more than two levels to capture more of the complexity in the hierarchical classification .
For example , if keywords are treated as ordered then the hierarchy continues down multiple levels .
HDLTex can also be applied to unlabeled documents , such as those found in news or other media outlets .
