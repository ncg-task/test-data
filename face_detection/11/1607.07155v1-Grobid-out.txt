title
A Unified Multi-scale Deep Convolutional Neural Network for Fast Object Detection
abstract
A unified deep neural network, denoted the multi-scale CNN (MS-CNN), is proposed for fast multi-scale object detection. The MS-CNN consists of a proposal sub-network and a detection sub-network. In the proposal sub-network, detection is performed at multiple output layers, so that receptive fields match objects of different scales. These complementary scale-specific detectors are combined to produce a strong multi-scale object detector. The unified network is learned end-to-end, by optimizing a multi-task loss. Feature upsampling by deconvolution is also explored, as an alternative to input upsampling, to reduce the memory and computation costs. State-of-the-art object detection performance, at up to 15 fps, is reported on datasets, such as KITTI and Caltech, containing a substantial number of small objects.
Introduction
Classical object detectors, based on the sliding window paradigm, search for objects at multiple scales and aspect ratios. While real-time detectors are available for certain classes of objects, e.g. faces or pedestrians, it has proven difficult to build detectors of multiple object classes under this paradigm. Recently, there has been interest in detectors derived from deep convolutional neural networks (CNNs). While these have shown much greater ability to address the multiclass problem, less progress has been made towards the detection of objects at multiple scales. The R-CNN samples object proposals at multiple scales, using a preliminary attention stage, and then warps these proposals to the size (e.g. 224×224) supported by the CNN. This is, however, very inefficient from a computational standpoint. The development of an effective and computationally efficient region proposal mechanism is still an open problem. The more recent Faster-RCNN addresses the issue with a region proposal network (RPN), which enables end-to-end training. However, the RPN generates proposals of multiple scales by sliding a fixed set of filters over a fixed set of convolutional feature maps. This creates an inconsistency between the sizes of objects, which are variable, and filter receptive fields, which are fixed. As shown in, a fixed receptive field cannot cover the multiple scales at which objects. In natural images, objects can appear at very different scales, as illustrated by the yellow bounding boxes. A single receptive field, such as that of the RPN (shown in the shaded area), cannot match this variability.
appear in natural scenes. This compromises detection performance, which tends to be particularly poor for small objects, like that in the center of. In fact, handle such objects by upsampling the input image both at training and testing time. This increases the memory and computation costs of the detector.
This work proposes a unified multi-scale deep CNN, denoted the multi-scale CNN (MS-CNN), for fast object detection. Similar to, this network consists of two sub-networks: an object proposal network and an accurate detection network. Both of them are learned end-to-end and share computations. However, to ease the inconsistency between the sizes of objects and receptive fields, object detection is performed with multiple output layers, each focusing on objects within certain scale ranges (see). The intuition is that lower network layers, such as "conv-3," have smaller receptive fields, better matched to detect small objects. Conversely, higher layers, such as "conv-5," are best suited for the detection of large objects. The complimentary detectors at different output layers are combined to form a strong multi-scale detector. This is shown to produce accurate object proposals on detection benchmarks with large variation of scale, such as KITTI, achieving a recall of over 95% for only 100 proposals.
A second contribution of this work is the use of feature upsampling as an alternative to input upsampling. This is achieved by introducing a deconvolutional layer that increases the resolution of feature maps (see), enabling small objects to produce larger regions of strong response. This is shown to reduce memory and computation costs. While deconvolution has been explored for segmentation and edge detection, it is, as far as we know, for the first time used to speedup and improve detection. When combined with efficient context encoding and hard negative mining, it results in a detector that advances the state-of-the-art detection on the KITTI and Caltech benchmarks. Without image upsampling, the MS-CNN achieves speeds of 10 fps on KITTI (1250×375) and 15 fps on Caltech (640×480) images.

Related Work
One of the earliest methods to achieve real-time detection with high accuracy was the cascaded detector of. This architecture has been widely used to implement sliding window detectors for faces, pedestrians and cars.
Two main streams of research have been pursued to improve its speed: fast feature extraction and cascade learning. In, a set of efficient Haar features was proposed with recourse to integral images. The aggregate feature channels (ACF) of made it possible to compute HOG features at about 100 fps. On the learning front, proposed the soft-cascade, a method to transform a classifier learned with boosting into a cascade with certain guarantees in terms of false positive and detection rate. introduced a Lagrangian formulation to learn cascades that achieve the optimal trade-off between accuracy and computational complexity. extended this formulation for cascades of highly heterogeneous features, ranging from ACF set to deep CNNs, with widely different complexity. The main current limitation of detector cascades is the difficulty of implementing multiclass detectors under this architecture.
In an attempt to leverage the success of deep neural networks for object classification, proposed the R-CNN detector. This combines an object proposal mechanism and a CNN classifier. While the R-CNN surpassed previous detectors by a large margin, its speed is limited by the need for object proposal generation and repeated CNN evaluation. has shown that this could be ameliorated with recourse to spatial pyramid pooling (SPP), which allows the computation of CNN features once per image, increasing the detection speed by an order of magnitude. Building on SPP, the Fast-RCNN introduced the ideas of back-propagation through the ROI pooling layer and multi-task learning of a classifier and a bounding box regressor. However, it still depends on bottomup proposal generation. More recently, the Faster-RCNN has addressed the generation of object proposals and classifier within a single neural network, leading to a significant speedup for proposal detection. Another interesting work is YOLO, which outputs object detections within a 7×7 grid. This network runs at ?40 fps, but with some compromise of detection accuracy.
For object recognition, it has been shown beneficial to combine multiple losses, defined on intermediate layers of a single network. GoogLeNet proposed the use of three weighted classification losses, applied at layers of intermediate heights, showing that this type of regularization is useful for very deep models. The deeply supervised network architecture of extended this idea to a larger number of layers. The fact that higher layers convey more semantic information motivated to combine features from intermediate layers, leading to more accurate semantic segmentation. A similar idea was shown useful for edge detection in. Similar to, the proposed MS-CNN is learned with losses that account for intermediate layer outputs. However, the aim is not to simply regularize the learning, as in, or provide detailed information for higher outputs, as in. Instead, the goal is to produce a strong individual object detector at each intermediate output layer.

Multi-scale Object Proposal Network
In this section, we introduce the proposed network for the generation of object proposals.

Multi-scale Detection
The coverage of many object scales is a critical problem for object detection. Since a detector is basically a dot-product between a learned template and an image region, the template has to be matched to the spatial support of the object to recognize. There are two main strategies to achieve this goal. The first is to learn a single classifier and rescale the image multiple times, so that the classifier can match all possible object sizes. As illustrated in (a), this strategy requires feature computation at multiple image scales. While it usually produces the most accurate detection, it tends to be very costly. An alternative approach is to apply multiple classifiers to a single input image. This strategy, illustrated in, avoids the repeated computation of feature maps and tends to be efficient. However, it requires an individual classifier for each object scale and usually fails to produce good detectors. Several approaches have been proposed to achieve a good trade-off between accuracy and complexity. For example, the strategy of (c) is to rescale the input a few times and learn a small number of model templates. Another possibility is the feature approximation of. As shown in, this consists of rescaling the input a small number of times and interpolating the missing feature maps. This has been shown to achieve considerable speed-ups fora very modest loss of classification accuracy.
The implementation of multi-scale strategies on CNN-based detectors is slightly different from those discussed above, due to the complexity of CNN features. As shown in (e), the R-CNN of simply warps object proposal patches to the natural scale of the CNN. This is somewhat similar to (a), but features are computed for patches rather than the entire image. The multi-scale mechanism of the RPN, shown in, is similar to that of. However, multiple sets of templates of the same size are applied to all feature maps. This can lead to a severe scale inconsistency for template matching. As shown in, the single scale of the feature maps, dictated by the (228×228) receptive field of the CNN, can be severely mismatched to small (e.g. 32×32) or large (e.g. 640×640) objects. This compromises object detection performance.
Inspired by previous evidence on the benefits of the strategy of (c) over that of

Architecture
The detailed architecture of the MS-CNN proposal network is shown in. The network detects objects through several detection branches. The results by all detection branches are simply declared as the final proposal detections. The network has a standard CNN trunk, depicted in the center of the figure, and a set of output branches, which emanate from different layers of the trunk. These branches consist of a single detection layer. Note that a buffer convolutional layer is introduced on the branch that emanates after layer "conv4-3". Since this branch is close to the lower layers of the trunk network, it affects their gradients more than the other detection branches. This can lead to some instability during learning. The buffer convolution prevents the gradients of the detection branch from being back-propagated directly to the trunk layers.
During training, the parameters W of the multi-scale proposal network are learned from a set of training samples
, where X i is a training image patch, and Y i = (y i , bi ) the combination of its class label y i ? {0, 1, 2, · · · , K} and bounding box coordinates
. This is achieved with a multi-task loss
where M is the number of detection branches, ? m the weight of loss l m , and S = {S 1 , S 2 , · · · , S M }, where Sm contains the examples of scale m. Note that only a subset Sm of the training samples, selected by scale, contributes to the loss of detection layer m. Inspired by the success of joint learning of classification and bounding box regression, the loss of each detection layer combines these two objectives
where p(X) = (p 0 (X), · · · , p K (X)) is the probability distribution over classes,
the smoothed bounding box regression loss of. The bounding box loss is only used for positive samples and the optimal parameters W * = arg min W L(W) are learned by stochastic gradient descent.

Sampling
This section describes the assembly of training samples
In what follows, the superscript m is dropped for notional simplicity. An anchor is centered at the sliding window on layer m associated with width and height corresponding to filter size. More details can be found in.
Sgt is the ground truth and IoU the intersection over union between two bounding boxes. In this case, Y = (y i * , bi * ), where i * = arg max i?Sgt IoU (b, bi ) and (X, Y ) are added to the positive set S + . All the positive samples in
we considered three sampling strategies: random, bootstrapping, and mixture. Random sampling consists of randomly selecting negative samples according to a uniform distribution. Since the distribution of hard and easy negatives is heavily asymmetric too, most randomly collected samples are easy negatives. It is well known that hard negatives mining helps boost performance, since hard negatives have the largest influence on the detection accuracy. Bootstrapping accounts for this, by ranking the negative samples according to their objectness scores, and then collecting top |S ? | negatives. Mixture sampling combines the two, randomly sampling half of S ? and sampling the other half by bootstrapping. In our experiments, mixture sampling has very similar performance to bootstrapping.
To guarantee that each detection layer only detects objects in a certain range of scales, the training set for the layer consists of the subset of S that covers the corresponding scale range. For example, the samples of smallest scale are used to train the detector of "det-8" in. It is possible that no positive training samples are available fora detection layer, resulting in |S ? |/|S + | ? ?. This can make learning unstable. To address this problem, the cross-entropy terms of positives and negatives are weighted as follows

Implementation Details
Learning is initialized with the model generated by the first learning stage of the proposal network, described in Section 3.4. The learning rate is set to 0.0005, and reduced by a factor of 10 times after every 10,000 iterations. Learning stops after 25,000 iterations. The joint optimization of (6) is solved by back-propagation throughout the unified network. Bootstrapping is used and ? = 1. Following, the parameters of layers"conv1-1" to "conv2-2" are fixed during learning, for faster training.

Object Detection Network
Although the proposal network could work as a detector itself, it is not strong, since its sliding windows do not cover objects well. To increase detection accu- racy, a detection network is added. Following, a ROI pooling layer is first used to extract features of a fixed dimension (e.g. 7×7×512). The features are then fed to a fully connected layer and output layers, as shown in. A deconvolution layer, described in Section 4.1, is added to double the resolution of the feature maps. The multi-task loss of (1) is extended to
where l M+1 and S M+1 are the loss and training samples for the detection sub-network. S M+1 is collected as in. As in (2), l M+1 combines a crossentropy loss for classification and a smoothed L 1 loss for bounding box regression. The detection sub-network shares some of the proposal sub-network parameters W and adds some parameters W d . The parameters are optimized jointly, i.e. (W * , W * d ) = arg min L(W, W d ). In the proposed implementation, ROI pooling is applied to the top of the "conv4-3" layer, instead of the "conv5-3" layer of, since "conv4-3" feature maps performed better in our experiments. One possible explanation is that "conv4-3" corresponds to higher resolution and is better suited for location-aware bounding box regression.

CNN Feature Map Approximation
Input size has a critical role in CNN-based object detection accuracy. Simply forwarding object patches, at the original scale, through the CNN impairs performance (especially for small ones), since the pre-trained CNN models have a natural scale (e.g. 224×224). While the R-CNN naturally solves this problem through warping, it is not explicitly addressed by the Fast-RCNN or Faster-RCNN. To bridge the scale gap, these methods simply upsample input images (by ?2 times). For datasets, such as KITTI, containing large amounts of small objects, this has limited effectiveness. Input upsampling also has three side effects: large memory requirements, slow training and slow testing. It should be noted that input upsampling does not enrich the image details.
Instead, it is needed because the higher convolutional layers respond very weakly to small objects. For example, a 32×32 object is mapped into a 4×4 patch of the "conv4-3" layer and a 2×2 patch of the "conv5-3" layer. This provides limited information for 7×7 ROI pooling.
To address this problem, we consider an efficient way to increase the resolution of feature maps. This consists of upsampling feature maps (instead of the input) using a deconvolution layer, as shown in. This strategy is similar to that of, shown in, where input rescaling is replaced by feature rescaling. In, a feature approximator is learned by least squares. In the CNN world, a better solution is to use a deconvolution layer, similar to that of. Unlike input upsampling, feature upsampling does not incur in extra costs for memory and computation. Our experiments show that the addition of a deconvolution layer significantly boosts detection performance, especially for small objects. To the best of our knowledge, this is the first application of deconvolution to jointly improve the speed and accuracy of an object detector.

Context Embedding
Context has been shown useful for object detection and segmentation. Context information has been modeled by a recurrent neural network in and acquired from multiple regions around the object location in. In this work, we focus on context from multiple regions. As shown in, features from an object (green cube) and a context (blue cube) region are stacked together immediately after ROI pooling. The context region is 1.5 times larger than the object region. An extra convolutional layer without padding is used to reduce the number of model parameters. It helps compress redundant context and object information, without loss of accuracy, and guarantees that the number of model parameters is approximately the same.

Experimental Evaluation
The performance of the MS-CNN detector was evaluated on the KITTI and Caltech Pedestrian benchmarks. These were chosen because, unlike VOC and ImageNet, they contain many small objects. Typical image sizes 8x4 2048 anchor 40x20 56x28 80x40 112x56 160x80 224x112 320x160 are 1250×375 on KITTI and 640×480 on Caltech. KITTI contains three object classes: car, pedestrian and cyclist, and three levels of evaluation: easy, moderate and hard. The "moderate" level is the most commonly used. In total, 7,481 images are available for training/validation, and 7,518 for testing. Since no ground truth is available for the test set, we followed, splitting the trainval set into training and validation sets. In all ablation experiments, the training set was used for learning and the validation set for evaluation. Following, a model was trained for car detection and another for pedestrian/cyclist detection. One pedestrian model was learned on Caltech. The model configurations for original input size are shown in. The detector was implemented in C++ within the Caffe toolbox, and source code is available at https://github.com/zhaoweicai/mscnn. All times are reported for implementation on a single CPU core (2.40GHz) of an Intel Xeon E5-2630 server with 64GB of RAM. An NVIDIA Titan GPU was used for CNN computations.

Proposal Evaluation
We start with an evaluation of the proposal network. Following, oracle recall is used as performance metric. For consistency with the KITTI setup, aground truth is recalled if its best matched proposal has IoU higher than 70% for cars, and 50% for pedestrians and cyclists.
The roles of individual detection layers shows the detection accuracy of the various detection layers as a function of object height in pixels. As expected, each layer has highest accuracy for the objects that match its scale. While the individual recall across scales is low, the combination of all detectors achieves high recall for all object scales. The effect of input size shows that the proposal network is fairly robust to the size of input images for cars and pedestrians. For cyclist, performance increases between heights 384 and 576, but there are no gains beyond this. These results show that the network can achieve good proposal generation performance without substantial input upsampling. Detection sub-network improves proposal sub-network has shown that multi-task learning can benefit both bounding box regression and classification. On the other hand showed that, even when features are shared between the two tasks, object detection does not improve object proposals too much. shows that, for the MS-CNN, detection can substantially benefit proposal generation, especially for pedestrians.
Comparison with the state-of-the-art compares the proposal generation network to BING, Selective Search, EdgeBoxes, MCG, 3DOP and RPN. The top row of the figure shows that the MS-CNN achieves a recall about 98% with only 100 proposals. This should be compared to the ?2,000 proposals required by 3DOP and the ?10,000 proposals required by EdgeBoxbes. While it is not surprising that the proposed network outperforms unsupervised proposal methods, such as, its large gains over supervised methods, that can even use 3D information, are significant. The closest performance is achieved by RPN (input upsampled twice), which has substantially weaker performance for pedestrians and cyclists. When the input is not upsampled, RPN misses even more objects, as shown in. It is worth mentioning that the MS-CNN generates high quality proposals (high overlap with the ground truth) without any edge detection or segmentation. This is evidence for the effectiveness of bounding box regression networks.

Object Detection Evaluation
In this section we evaluate object detection performance. Since the performance of the cyclist detector has large variance on the validation set, due to the low number of cyclist occurrences, only car and pedestrian detection are considered in the ablation experiments.
The effect of input upsampling shows that input upsampling can be a crucial factor for detection. A significant improvement is obtained by upsampling the inputs by 1.5?2 times, but we saw little gains beyond a factor of. Proposal performance comparison on KITTI validation set (moderate). The first row is proposal recall curves and the second row is recall v.s. IoU for 100 proposals.. Results on the KITTI validation set. "hXXX" indicates an input of height "XXX", "2x" deconvolution, "ctx" context encoding, and "c" dimensionality reduction convolution. In columns "Time" and "# params", entries before the "/" are for car model and after for pedestrian/cyclist model. 2. This is smaller than the factor of 3.5 required by. Larger factors lead to (exponentially) slower detectors and larger memory requirements. Sampling strategy compares sampling strategies: random ("h576random"), bootstrapping ("h576") and mixture ("h576-mixture"). For car, these three strategies are close to each other. For pedestrian, bootstrapping and mixture are close, but random is much worse. Note that random sampling has many more false positives than the other two. CNN feature approximation Three methods were attempted for learning the deconvolution layer for feature map approximation: 1) bilinearly interpolated weights; 2) weights initialized by bilinear interpolation and learned with backpropagation; 3) weights initialized with Gaussian noise and learned by backpropagation. We found the first method to work best, confirming the findings of. Comparison to the state-of-the-art on KITTI benchmark test set (moderate).. As shown in, the deconvoltion layer helps inmost cases. The gains are larger for smaller input images, which tend to have smaller objects. Note that the feature map approximation adds trivial computation and no parameters. Context embedding shows that there is again in encoding context. However, the number of model parameters almost doubles. The dimensionality reduction convolution layer significantly reduces this problem, without impairment of accuracy or speed.
Object detection by the proposal network The proposal network can work as a detector, by switching the class-agnostic classification to class-specific. shows that, although not as strong as the unified network, it achieves fairly good results, which are better than those of some detectors on the KITTI leaderboard 1 .
Comparison to the state-of-the-art The results of model "h768-ctx-c" were submitted to the KITTI leaderboard. A comparison to previous approaches is given in and. The MS-CNN set anew record for the detection of pedestrians and cyclists. The columns "Pedestrians-Mod" and "Cyclists-Mod" show substantial gains (6 and 7 points respectively) over 3DOP, and much better performance than the Faster-RCNN, Regionlets, etc. We also led a nontrivial margin over the very recent SDP+RPN, which used scale depen-   dent pooling. In terms of speed, the network is fairly fast. For the largest input size, the MS-CNN detector is about 8 times faster than 3DOP. On the original images (1250×375) detection speed reaches 10 fps.
Pedestrian detection on Caltech The MS-CNN detector was also evaluated on the Caltech pedestrian benchmark. The model "h720-ctx" was compared to methods such as DeepParts, CompACT-Deep, CheckerBoard, LDCF, ACF, and SpatialPooling on three tasks: reasonable, medium and partial occlusion. As shown in, the MS-CNN has state-ofthe-art performance. and (c) show that it performs very well for small and occluded objects, outperforming DeepParts, which explicitly addresses occlusion. Moreover, it misses a very small number of pedestrians, due to the accuracy of the proposal network. The speed is approximately 8 fps (15 fps) on upsampled 960×720 (original 640×480) Caltech images.

Conclusions
We have proposed a unified deep convolutional neural network, denoted the MS-CNN, for fast multi-scale object detection. The detection is preformed at various intermediate network layers, whose receptive fields match various object scales. This enables the detection of all object scales by feedforwarding a single input image through the network, which results in a very fast detector. CNN feature approximation was also explored, as an alternative to input upsampling. It was shown to result in significant savings in memory and computation. Overall, the MS-CNN detector achieves high detection rates at speeds of up to 15 fps.
Acknowledgement This work was partially funded by NSF grant IIS1208522 and a gift from KETI. We also thank NVIDIA for GPU donations through their academic program.