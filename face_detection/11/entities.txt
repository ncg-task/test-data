202	96	131	https://github.com/zhaoweicai/mscnn
191	4	15	performance
191	16	18	of
191	23	40	MS - CNN detector
191	45	57	evaluated on
191	62	101	KITTI and Caltech Pedestrian benchmarks
203	0	9	All times
203	14	26	reported for
203	27	41	implementation
203	42	44	on
203	47	75	single CPU core ( 2.40 GHz )
203	76	78	of
203	82	109	Intel Xeon E5 - 2630 server
203	110	114	with
203	115	120	64 GB
203	121	123	of
203	124	127	RAM
204	3	19	NVIDIA Titan GPU
204	24	32	used for
204	33	49	CNN computations
29	10	18	proposes
29	21	49	unified multi-scale deep CNN
29	52	59	denoted
29	64	93	multi -scale CNN ( MS - CNN )
29	96	99	for
29	100	121	fast object detection
30	13	25	this network
30	26	37	consists of
30	38	54	two sub-networks
30	60	83	object proposal network
30	91	117	accurate detection network
31	17	24	learned
31	25	39	end - to - end
31	44	49	share
31	50	62	computations
35	4	27	complimentary detectors
35	28	30	at
35	31	54	different output layers
35	59	67	combined
35	68	75	to form
35	78	105	strong multi-scale detector
32	10	17	to ease
32	22	35	inconsistency
32	36	43	between
32	48	53	sizes
32	54	56	of
32	57	85	objects and receptive fields
32	88	104	object detection
32	108	122	performed with
32	123	145	multiple output layers
32	153	164	focusing on
32	165	172	objects
32	173	179	within
32	180	200	certain scale ranges
2	60	81	Fast Object Detection
4	92	125	fast multi-scale object detection
10	23	39	object detection
260	4	12	MS - CNN
260	13	16	set
260	19	29	new record
260	30	33	for
260	38	47	detection
260	48	50	of
260	51	75	pedestrians and cyclists
262	8	11	led
262	14	31	nontrivial margin
262	32	36	over
262	46	62	recent SDP + RPN
262	71	75	used
262	76	102	scale depen - dent pooling
266	21	23	on
266	80	108	Caltech pedestrian benchmark
266	36	44	MS - CNN
268	31	63	state - of the - art performance
268	89	97	performs
268	98	107	very well
268	108	111	for
268	112	138	small and occluded objects
268	141	154	outperforming
268	155	164	DeepParts
