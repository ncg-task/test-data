title
Training with Exploration Improves a Greedy Stack LSTM Parser
abstract
We adapt the greedy stack LSTM dependency parser of Dyer et al. (2015) to support a training-with-exploration procedure using dynamic oracles (Goldberg and Nivre, 2013)  instead of assuming an error-free action history. This form of training, which accounts for model predictions at training time, improves parsing accuracies. We discuss some modifications needed in order to get training with exploration to work well for a probabilistic neural network dependency parser.
Introduction
Natural language parsing can be formulated as a series of decisions that read words in sequence and incrementally combine them to form syntactic structures; this formalization is known as transitionbased parsing, and is often coupled with a greedy search procedure. The literature on transition-based parsing is vast, but all works share in common a classification component that takes into account features of the current parser state 1 and predicts the next action to take conditioned on the state. The state is of unbounded size. presented a parser in which the parser's unbounded state is embedded in a fixeddimensional continuous space using recurrent neural networks. Coupled with a recursive tree composition function, the feature representation is able to capture information from the entirety of the state, without resorting to locality assumptions that were common in most other transition-based parsers. The use of a novel stack LSTM data structure allows the parser to maintain a constant time per-state update, and retain an over all linear parsing time.
The was trained to maximize the likelihood of gold-standard transition sequences, given words. At test time, the parser makes greedy decisions according to the learned model. Although this setup obtains very good performance, the training and testing conditions are mismatched in the following way: at training time the historical context of an action is always derived from the gold standard (i.e., perfectly correct past actions), but at test time, it will be a model prediction.
In this work, we adapt the training criterion so as to explore parser states drawn not only from the training data, but also from the model as it is being learned. To do so, we use the method of to dynamically chose an optimal (relative to the final attachment accuracy) action given an imperfect history. By interpolating between algorithm states sampled from the model and those sampled from the training data, more robust predictions at test time can be made. We show that the technique can be used to improve the strong parser of Dyer et al.

Parsing Model and Parameter Learning
Our departure point is the parsing model described by. We do not describe the model in detail, and refer the reader to the original work. At each stage t of the parsing process, the parser state is encoded into a vector pt , which is used to compute the probability of the parser action at time t as:
where g z is a column vector representing the (output) embedding of the parser action z, and q z is a bias term for action z. The set A(S, B) represents the valid transition actions that maybe taken in the current state. Since pt encodes information about all previous decisions made by the parser, the chain rule gives the probability of any valid sequence of parse transitions z conditional on the input:
The parser is trained to maximize the conditional probability of taking a "correct" action at each parsing state. The definition of what constitutes a "correct" action is the major difference between a static oracle as used by and the dynamic oracle explored here.
Regardless of the oracle, our training implementation constructs a computation graph (nodes that represent values, linked by directed edges from each function's inputs to its outputs) for the negative log probability for the oracle transition sequence as a function of the current model parameters and uses forward-and backpropagation to obtain the gradients respect to the model parameters.

Training with Static Oracles
With a static oracle, the training procedure computes a canonical reference series of transitions for each gold parse tree. It then runs the parser through this canonical sequence of transitions, while keeping track of the state representation pt at each step t, as well as the distribution over transitions p(z t | pt ) which is predicted by the current classifier for the state representation. Once the end of the sentence is reached, the parameters are updated towards maximizing the likelihood of the reference transition sequence (Equation 2), which equates to maximizing the probability of the correct transition, p(z gt | pt ), at each state along the path.

Training with Dynamic Oracles
In the static oracle case, the parser is trained to predict the best transition to take at each parsing step, assuming all previous transitions were correct. Since the parser is likely to make mistakes at test time and encounter states it has not seen during training, this training criterion is problematic. Instead, we would prefer to train the parser to behave optimally even after making a mistake (under the constraint that it cannot backtrack or fix any previous decision). We thus need to include in the training examples states that result from wrong parsing decisions, together with the optimal transitions to take in these states. To this end we reconsider which training examples to show, and what it means to behave optimally on these training examples. The framework of training with exploration using dynamic oracles suggested by provides answers to these questions. While the application of dynamic oracle training is relatively straightforward, some adaptations were needed to accommodate the probabilistic training objective. These adaptations mostly follow.

Dynamic Oracles.
A dynamic oracle is the component that, given a gold parse tree, provides the optimal set of possible actions to take for any valid parser state. In contrast to static oracles that derive a canonical state sequence for each gold parse tree and say nothing about states that deviate from this canonical path, the dynamic oracle is well defined for states that result from parsing mistakes, and they may produce more than a single gold action for a given state. Under the dynamic oracle framework, an action is said to be optimal for a state if the best tree that can be reached after taking the action is no worse (in terms of accuracy with respect to the gold tree) than the best tree that could be reached prior to taking that action. define the arcdecomposition property of transition systems, and show how to derive efficient dynamic oracles for transition systems thatare arc-decomposable. 2 Un-fortunately, the arc-standard transition system does not have this property. While it is possible to compute dynamic oracles for the arc-standard system, the computation relies on a dynamic programming algorithm which is polynomial in the length of the stack. As the dynamic oracle has to be queried for each parser state seen during training, the use of this dynamic oracle will make the training runtime several times longer. We chose instead to switch to the arc-hybrid transition system, which is very similar to the arc-standard system but is arc-decomposable and hence admits an efficient O(1) dynamic oracle, resulting in only negligible increase to training runtime. We implemented the dynamic oracle to the arc-hybrid system as described by.
Training with Exploration. In order to expose the parser to configurations thatare likely to result from incorrect parsing decisions, we make use of the probabilistic nature of the classifier. During training, instead of following the gold action, we sample the next transition according to the output distribution the classifier assigns to the current configuration. Another option, taken by Goldberg and Nivre, is to follow the one-best action predicted by the classifier. However, initial experiments showed that the onebest approach did notwork well. Because the neural network classifier becomes accurate early on in the training process, the one-best action is likely to be correct, and the parser is then exposed to very few error states in its training process. By sampling from the predicted distribution, we are effectively increasing the chance of straying from the gold path during training, while still focusing on mistakes that receive relatively high parser scores. We believe further formal analysis of this method will reveal connections to reinforcement learning and, perhaps, other methods for learning complex policies.
Taking this idea further, we could increase the number of error-states observed in the training process by changing the sampling distribution so as to bias it toward more low-probability states. We do this by raising each probability to the power of arcs A, if each arc in A can be derived from p, then a valid tree structure containing all of the arcs in A can also be derived from p. This is a sufficient condition, but whether it is necessary is unknown; hence the question of an efficient, O(1) dynamic oracle for the augmented system is open. ? (0 < ? ? 1) and re-normalizing. This transformation keeps the relative ordering of the events, while shifting probability mass towards less frequent events. As we show below, this turns out to be very beneficial for the configurations that make use of external embeddings. Indeed, these configurations achieve high accuracies and sharp class distributions early on in the training process.
The parser is trained to maximize the likelihood of a correct action z g at each parsing state pt according to Equation 1. When using the dynamic oracle, a state pt may admit multiple correct actions z g = {z g i , . . . , z g k }. Our objective in such cases is the marginal likelihood of all correct actions, 3
(3)

Experiments
Following the same settings of Chen and Manning (2014) and we report results 4 in the English PTB and Chinese CTB-5. The score achieved by the dynamic oracle for English is 93.56 UAS. This is remarkable given that the parser uses a completely greedy search procedure. Moreover, the Chinese score establishes the state-of-the-art, using the same settings as Chen and Manning (2014). and Andor et al., respectively.
A'16-beam is the parser with beam larger than 1 by Andor et al.. Bold numbers indicate the best results among the greedy parsers.
The error-exploring dynamic-oracle training always improves over static oracle training controlling for the transition system, but the arc-hybrid system slightly under-performs the arc-standard system when trained with static oracle. Flattening the sampling distribution (? = 0.75) is especially beneficial when training with pretrained word embeddings.
In order to be able to compare with similar greedy parsers we report the performance of the parser on the multilingual treebanks of the CoNLL 2009 shared task. Since some of the treebanks contain nonprojective sentences and arc-hybrid does not allow nonprojective trees, we use the pseudo-projective approach. We used predicted partof-speech tags provided by the CoNLL 2009 shared task organizers. We also include results with pretrained word embeddings for English, Chinese, German, and Spanish following the same training setup as; for English and Chinese we used the same pretrained word embeddings as in Table 1, for German we used the monolingual training data from the WMT 2015 dataset and for Spanish we used the Spanish Gigaword version 3. See.

Related Work
Training greedy parsers on non-gold outcomes, facilitated by dynamic oracles, has been explored by several researchers in different ways We report the performance of these parsers in the most comparable setup, that is, with beam size 1 or greedy search.. More generally, training greedy search systems by paying attention to the expected classifier behavior during test time has been explored under the imitation learning and learningto-search frameworks. Directly modeling the probability of making a mistake has also been explored for parsing.
Generally, the use of RNNs to conditionally predict actions in sequence given a history is spurring increased interest in training regimens that make the learned model more robust to test-time prediction errors.
Solutions based on curriculum learning, expected loss training, and reinforcement learning have been proposed. Finally, abandoning greedy search in favor of approximate global search offers an alternative solution to the problems with greedy search (Andor et al.,, and has been analyzed as well, including for parsing). presented stack LSTMs and used them to implement a transition-based dependency parser. The parser uses a greedy learning strategy which potentially provides very high parsing speed while still achieving state-of-the-art results. We have demonstrated that improvement by training the greedy parser on non-gold outcomes; dynamic oracles improve the stack LSTM parser, achieving 93.56 UAS for English, maintaining greedy search.

Conclusions